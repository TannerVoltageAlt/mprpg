{"files":{"pxt.json":"{\n    \"name\": \"arcade-character-animations\",\n    \"version\": \"0.0.2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"docs/clear-character-state.md\",\n        \"docs/loop-character-animation.md\",\n        \"docs/matches-rule.md\",\n        \"docs/predicate.md\",\n        \"docs/run-character-animation.md\",\n        \"docs/set-character-animations-enabled.md\",\n        \"docs/set-character-state.md\",\n        \"docs/rule.md\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.4.44\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","main.ts":"\n/**\n * Rules used to dictate when animations should be looped on\n * a sprite.\n *\n * These are redundant on purpose. We need to preserve the\n * number of predicates in a rule, so every predicate needs\n * to be unique. We favor rules that use more predicates\n */\nenum Predicate {\n    //% block=\"not moving\"\n    NotMoving = 1,\n    //% block=\"moving\"\n    Moving = 1 << 1,\n    //% block=\"facing up\"\n    FacingUp = 1 << 2,\n    //% block=\"facing right\"\n    FacingRight = 1 << 3,\n    //% block=\"facing down\"\n    FacingDown = 1 << 4,\n    //% block=\"facing left\"\n    FacingLeft = 1 << 5,\n    //% block=\"moving up\"\n    MovingUp = 1 << 6,\n    //% block=\"moving right\"\n    MovingRight = 1 << 7,\n    //% block=\"moving down\"\n    MovingDown = 1 << 8,\n    //% block=\"moving left\"\n    MovingLeft = 1 << 9,\n    //% block=\"hitting wall up\"\n    HittingWallUp = 1 << 10,\n    //% block=\"hitting wall right\"\n    HittingWallRight = 1 << 11,\n    //% block=\"hitting wall down\"\n    HittingWallDown = 1 << 12,\n    //% block=\"hitting wall left\"\n    HittingWallLeft = 1 << 13,\n}\n\n//% color=\"#7d6282\" icon=\"\\uf03d\" block=\"Character\"\nnamespace characterAnimations {\n    export type Rule = number;\n\n    const FACING = Predicate.FacingUp | Predicate.FacingRight | Predicate.FacingDown | Predicate.FacingLeft;\n    const MOVING = Predicate.MovingUp | Predicate.MovingRight | Predicate.MovingDown | Predicate.MovingLeft | Predicate.Moving;\n\n    let sceneStack: CharacterAnimationSceneState[];\n\n    class CharacterAnimationSceneState {\n        public characters: CharacterState[];\n\n        constructor() {\n            this.characters = [];\n        }\n\n        update() {\n            const dt = game.currentScene().eventContext.deltaTimeMillis;\n\n            let cleanup = false;\n            for (const character of this.characters) {\n                if (character.sprite.flags & sprites.Flag.Destroyed) cleanup = true;\n                character.update(dt);\n            }\n\n            if (cleanup) {\n                this.characters = this.characters.filter(character => !(character.sprite.flags & sprites.Flag.Destroyed))\n            }\n        }\n    }\n\n    class CharacterAnimation {\n        startFrames: Image[];\n        loopFrames: Image[];\n        startInterval: number;\n        loopInterval: number;\n\n        constructor(public rule: Rule) {\n        }\n    }\n\n     class CharacterState {\n        protected animations: CharacterAnimation[];\n        protected lastState: number;\n        protected current: CharacterAnimation;\n        protected possibleFacingDirections: number;\n        protected enabled: boolean;\n\n        protected lastX: number;\n        protected lastY: number;\n\n        protected runningStartFrames: boolean;\n\n        protected timer: number;\n        protected frame: number;\n\n        protected manualFlags: number;\n\n        constructor(public sprite: Sprite) {\n            this.animations = [];\n            this.timer = 0;\n            this.frame = 0;\n            this.lastState = Predicate.FacingRight;\n            this.possibleFacingDirections = 0;\n            this.enabled = true;\n            this.lastX = sprite.x;\n            this.lastY = sprite.y;\n            this.manualFlags = 0;\n        }\n\n        setFrames(loop: boolean, frames: Image[], interval: number, rule: Rule) {\n            this.possibleFacingDirections |= (rule & FACING);\n            for (const animation of this.animations) {\n                if (animation.rule === rule) {\n                    if (loop) {\n                        animation.loopFrames = frames;\n                        animation.loopInterval = interval;\n                    }\n                    else {\n                        animation.startFrames = frames;\n                        animation.startInterval = interval;\n                    }\n                    return;\n                }\n            }\n\n            const anim = new CharacterAnimation(rule);\n\n            if (loop) {\n                anim.loopFrames = frames;\n                anim.loopInterval = interval;\n            }\n            else {\n                anim.startFrames = frames;\n                anim.startInterval = interval;\n            }\n\n            this.animations.push(anim);\n        }\n\n        setLoopFrames(frames: Image[], interval: number, rule: Rule) {\n            this.setFrames(true, frames, interval, rule);\n        }\n\n        setStartFrames(frames: Image[], interval: number, rule: Rule) {\n            this.setFrames(false, frames, interval, rule);\n        }\n\n        update(dt: number) {\n            let state = 0;\n\n            if (this.sprite.vx | this.sprite.vy) {\n                state |= Predicate.Moving;\n\n                if (this.sprite.vx > 0) {\n                    state |= (Predicate.FacingRight & this.possibleFacingDirections) | Predicate.MovingRight;\n                }\n                else if (this.sprite.vx < 0) {\n                    state |= (Predicate.FacingLeft & this.possibleFacingDirections) | Predicate.MovingLeft\n                }\n\n                if (this.sprite.vy > 0) {\n                    state |= (Predicate.FacingDown & this.possibleFacingDirections) | Predicate.MovingDown;\n                }\n                else if (this.sprite.vy < 0) {\n                    state |= (Predicate.FacingUp & this.possibleFacingDirections) | Predicate.MovingUp\n                }\n\n                if (!(state & FACING)) {\n                    state |= (this.lastState & FACING)\n                }\n            }\n            else if (this.sprite.x != this.lastX || this.sprite.y != this.lastY) {\n                state |= Predicate.Moving;\n\n                if (this.sprite.x > this.lastX) {\n                    state |= (Predicate.FacingRight & this.possibleFacingDirections) | Predicate.MovingRight;\n                }\n                else if (this.sprite.x < this.lastX) {\n                    state |= (Predicate.FacingLeft & this.possibleFacingDirections) | Predicate.MovingLeft\n                }\n\n                if (this.sprite.y > this.lastY) {\n                    state |= (Predicate.FacingDown & this.possibleFacingDirections) | Predicate.MovingDown;\n                }\n                else if (this.sprite.y < this.lastY) {\n                    state |= (Predicate.FacingUp & this.possibleFacingDirections) | Predicate.MovingUp\n                }\n\n                if (!(state & FACING)) {\n                    state |= (this.lastState & FACING)\n                }\n            }\n            else {\n                state |= Predicate.NotMoving;\n                state |= (this.lastState & FACING);\n            }\n\n            if (this.sprite.isHittingTile(CollisionDirection.Bottom)) {\n                state |= Predicate.HittingWallDown;\n            }\n            if (this.sprite.isHittingTile(CollisionDirection.Top)) {\n                state |= Predicate.HittingWallUp;\n            }\n            if (this.sprite.isHittingTile(CollisionDirection.Right)) {\n                state |= Predicate.HittingWallRight;\n            }\n            if (this.sprite.isHittingTile(CollisionDirection.Left)) {\n                state |= Predicate.HittingWallLeft;\n            }\n\n            this.lastX = this.sprite.x;\n            this.lastY = this.sprite.y;\n\n\n\n            const newAnimation = this.pickRule(this.manualFlags || state);\n            if (newAnimation !== this.current) {\n                this.frame = 0;\n                this.timer = 0;\n\n                this.runningStartFrames = !!(newAnimation && newAnimation.startFrames);\n\n                this.current = newAnimation;\n\n                if (this.current && this.enabled) {\n                    if (this.runningStartFrames) {\n                        this.sprite.setImage((this.current.startFrames[0]))\n                    }\n                    else {\n                        this.sprite.setImage((this.current.loopFrames[0]))\n                    }\n                }\n            }\n\n            if (!this.current || !this.enabled) return;\n\n            this.timer += dt;\n\n            if (this.runningStartFrames) {\n                while (this.timer >= this.current.startInterval && this.runningStartFrames) {\n                    this.timer -= this.current.startInterval;\n                    this.frame++;\n\n                    if (this.frame >= this.current.startFrames.length) {\n                        this.runningStartFrames = false;\n                        if (this.current.loopFrames) {\n                            this.sprite.setImage(this.current.loopFrames[0]);\n                            this.timer = 0;\n                            this.frame = 0;\n                        }\n                    }\n                    else {\n                        this.sprite.setImage(this.current.startFrames[this.frame])\n                    }\n                }\n            }\n            else if (this.current.loopFrames) {\n                while (this.timer >= this.current.loopInterval) {\n                    this.timer -= this.current.loopInterval;\n                    this.frame = (this.frame + 1) % this.current.loopFrames.length;\n\n                    this.sprite.setImage(this.current.loopFrames[this.frame])\n                }\n            }\n        }\n\n        matchesRule(rule: Rule) {\n            return !(((this.manualFlags || this.lastState) & rule) ^ rule);\n        }\n\n        setEnabled(enabled: boolean) {\n            this.enabled = enabled;\n            if (enabled && this.current) {\n                if (this.runningStartFrames) {\n                    this.sprite.setImage(this.current.startFrames[this.frame])\n                }\n                else {\n                    this.sprite.setImage(this.current.loopFrames[this.frame])\n                }\n            }\n        }\n\n        setManualFlags(flags: Rule) {\n            // Check if invalid\n            flags = rule(flags);\n            if (!flags) return;\n\n            this.manualFlags = flags;\n        }\n\n        clearState() {\n            this.manualFlags = 0;\n            this.lastState = 0;\n        }\n\n        protected pickRule(state: number) {\n            this.lastState = state;\n\n            // If we have multiple animations with the same best score, we\n            // want to prioritize the current animation and then the rest\n            // by the order they were added\n            let best = this.current;\n            let bestScore = this.current && score(state, best.rule);\n            let currentScore: number;\n\n            for (const animation of this.animations) {\n                currentScore = score(state, animation.rule);\n                if (currentScore > bestScore) {\n                    bestScore = currentScore;\n                    best = animation;\n                }\n            }\n\n            if (bestScore === 0 || bestScore == undefined) return null;\n\n            return best;\n        }\n    }\n\n     function init() {\n         if (sceneStack) {\n             if (!sceneStack.length) {\n                 initScene();\n             }\n             return;\n         }\n         sceneStack = [];\n\n         game.addScenePushHandler(initScene);\n\n         game.addScenePopHandler(function (oldScene: scene.Scene) {\n             sceneStack.pop();\n         });\n\n         initScene();\n     }\n\n     function initScene() {\n         sceneStack.push(new CharacterAnimationSceneState());\n         const sceneState = sceneStack[sceneStack.length - 1];\n\n         game.currentScene().eventContext.registerFrameHandler(scene.ANIMATION_UPDATE_PRIORITY, function() {\n             if (sceneState) {\n                 sceneState.update();\n             }\n         });\n     }\n\n    function score(state: number, rule: Rule) {\n        let res = 0;\n        let check = state & rule;\n\n        if (check ^ rule) return 0;\n\n        while (check) {\n            if (check & 1) ++res;\n            check >>= 1;\n        }\n\n        return res;\n    }\n\n    function getStateForSprite(sprite: Sprite, createIfNotFound: boolean) {\n        init();\n\n        if (!sprite) return undefined;\n\n        const sceneState = sceneStack[sceneStack.length - 1];\n        for (const state of sceneState.characters) {\n            if (state.sprite === sprite) {\n                return state;\n            }\n        }\n\n        if (createIfNotFound) {\n            const newState = new CharacterState(sprite);\n            sceneState.characters.push(newState);\n            return newState;\n        }\n        return undefined;\n    }\n\n    export function ruleToString(rule: Rule) {\n        let out = \"\";\n        if (rule & Predicate.NotMoving) {\n            out += \"not-moving \"\n        }\n        if (rule & Predicate.Moving) {\n            out += \"moving \"\n        }\n        if (rule & Predicate.FacingUp) {\n            out += \"facing-up \"\n        }\n        if (rule & Predicate.FacingRight) {\n            out += \"facing-right \"\n        }\n        if (rule & Predicate.FacingDown) {\n            out += \"facing-down \"\n        }\n        if (rule & Predicate.FacingLeft) {\n            out += \"facing-left \"\n        }\n        if (rule & Predicate.MovingUp) {\n            out += \"moving-up \"\n        }\n        if (rule & Predicate.MovingRight) {\n            out += \"moving-right \"\n        }\n        if (rule & Predicate.MovingDown) {\n            out += \"moving-down \"\n        }\n        if (rule & Predicate.MovingLeft) {\n            out += \"moving-left \"\n        }\n        if (rule & Predicate.HittingWallUp) {\n            out += \"hitting-wall-up \"\n        }\n        if (rule & Predicate.HittingWallRight) {\n            out += \"hitting-wall-right \"\n        }\n        if (rule & Predicate.HittingWallDown) {\n            out += \"hitting-wall-down \"\n        }\n        if (rule & Predicate.HittingWallLeft) {\n            out += \"hitting-wall-left \"\n        }\n\n        return out.trim();\n    }\n\n    /**\n     * Loops the passed frames on the sprite at the given interval whenever\n     * the specified rule is true for that sprite.\n     *\n     * If more than one rule applies, the most specific rule will be used.\n     * If multiple rules are equally specific, the currently executing rule\n     * is favored (or one is chosen at random).\n     *\n     * @param sprite    the sprite to animate\n     * @param frames    the images that make up that animation\n     * @param frameInterval the amount of time to spend on each frame in milliseconds\n     * @param rule      the rule that decides when this animation will play\n     */\n    //% blockId=arcade_character_loop_frames\n    //% block=\"$sprite loop frames $frames $frameInterval when $rule\"\n    //% sprite.defl=mySprite\n    //% sprite.shadow=variables_get\n    //% frames.shadow=animation_editor\n    //% frameInterval.shadow=timePicker\n    //% rule.shadow=arcade_character_make_rule\n    //% weight=100\n    //% blockGap=8\n    //% help=github:arcade-character-animations/docs/loop-character-animation\n    export function loopFrames(sprite: Sprite, frames: Image[], frameInterval: number, rule: Rule) {\n        init();\n        if (!sprite || !frames || !frames.length || !rule) return;\n        if (Number.isNaN(frameInterval) || frameInterval < 5) frameInterval = 5;\n\n        const state = getStateForSprite(sprite, true);\n        state.setLoopFrames(frames, frameInterval, rule);\n    }\n\n    /**\n     * Runs the passed frames on the sprite at the given interval whenever\n     * the specified rule begins to be true for that sprite. If there are loop\n     * frames for a rule, they will take effect after the run is complete.\n     *\n     * If more than one rule applies, the most specific rule will be used.\n     * If multiple rules are equally specific, the currently executing rule\n     * is favored (or one is chosen at random).\n     *\n     * @param sprite    the sprite to animate\n     * @param frames    the images that make up that animation\n     * @param frameInterval the amount of time to spend on each frame in milliseconds\n     * @param rule      the rule that decides when this animation will play\n     */\n    //% blockId=arcade_character_run_frames\n    //% block=\"$sprite run frames $frames $frameInterval when $rule becomes true\"\n    //% sprite.defl=mySprite\n    //% sprite.shadow=variables_get\n    //% frames.shadow=animation_editor\n    //% frameInterval.shadow=timePicker\n    //% rule.shadow=arcade_character_make_rule\n    //% weight=90\n    //% help=github:arcade-character-animations/docs/run-character-animation\n    export function runFrames(sprite: Sprite, frames: Image[], frameInterval: number, rule: Rule) {\n        init();\n        if (!sprite || !frames || !frames.length || !rule) return;\n        if (Number.isNaN(frameInterval) || frameInterval < 5) frameInterval = 5;\n\n        const state = getStateForSprite(sprite, true);\n        state.setStartFrames(frames, frameInterval, rule);\n    }\n\n    /**\n     * Use to check the current state of a sprite. Be careful, sprites\n     * will only be facing a direction if they have an animation\n     * that uses the one of the facing direction rules (e.g. FacingLeft, FacingUp, etc.).\n     *\n     * @param sprite    The sprite to check the state of\n     * @param rule      The rule to check\n     */\n    //% blockId=arcade_character_is_facing\n    //% block=\"$sprite is $rule\"\n    //% sprite.defl=mySprite\n    //% sprite.shadow=variables_get\n    //% rule.shadow=arcade_character_make_rule\n    //% weight=80\n    //% help=github:arcade-character-animations/docs/matches-rule\n    export function matchesRule(sprite: Sprite, rule: Rule): boolean {\n        const existing = getStateForSprite(sprite, false);\n        if (existing) return existing.matchesRule(rule);\n\n        // If this sprite isn't in the system, then do the best we can. Note that this\n        // logic is slightly different than the logic above because we do not have a list\n        // of possible facing directions to narrow by or a reliable last x/y or an existing\n        let state = 0;\n        if (sprite.vx | sprite.vy) {\n                state |= Predicate.Moving;\n\n                if (sprite.vx > 0) {\n                    state |= Predicate.FacingRight | Predicate.MovingRight;\n                }\n                else if (sprite.vx < 0) {\n                    state |= Predicate.FacingLeft | Predicate.MovingLeft\n                }\n\n                if (sprite.vy > 0) {\n                    state |= Predicate.FacingDown | Predicate.MovingDown;\n                }\n                else if (sprite.vy < 0) {\n                    state |= Predicate.FacingUp | Predicate.MovingUp\n                }\n            }\n            else {\n                state |= Predicate.NotMoving;\n            }\n\n            if (sprite.isHittingTile(CollisionDirection.Bottom)) {\n                state |= Predicate.HittingWallDown;\n            }\n            if (sprite.isHittingTile(CollisionDirection.Top)) {\n                state |= Predicate.HittingWallUp;\n            }\n            if (sprite.isHittingTile(CollisionDirection.Right)) {\n                state |= Predicate.HittingWallRight;\n            }\n            if (sprite.isHittingTile(CollisionDirection.Left)) {\n                state |= Predicate.HittingWallLeft;\n            }\n\n        return !((state & rule) ^ rule);\n    }\n\n    /**\n     * Enable or disable all rule animations on the specified sprite.\n     * This is useful for temporarily turning off animations while\n     * another animation plays (e.g. an attack animation)\n     *\n     * @param sprite    The sprite to enable/disable animations on\n     * @param enabled   True to enable, false to disable\n     */\n    //% blockId=arcade_character_animation_enabled\n    //% block=\"$sprite enable character animations $enabled\"\n    //% sprite.defl=mySprite\n    //% sprite.shadow=variables_get\n    //% weight=70\n    //% blockGap=8\n    //% help=github:arcade-character-animations/docs/set-character-animations-enabled\n    export function setCharacterAnimationsEnabled(sprite: Sprite, enabled: boolean) {\n        const state = getStateForSprite(sprite, false);\n        if (!state) return;\n\n        state.setEnabled(enabled);\n    }\n\n    /**\n     * Manually set the state of a sprite. This state will remain in\n     * effect until you call clear state or set the state to something else.\n     * Invalid states (i.e. \"moving\" and \"not moving\") are ignored.\n     *\n     * @param sprite    The sprite to set the state of\n     * @param rule      The state to set on the sprite\n     */\n    //% blockId=arcade_character_animation_set_state\n    //% block=\"$sprite set state to $rule\"\n    //% sprite.defl=mySprite\n    //% sprite.shadow=variables_get\n    //% rule.shadow=arcade_character_make_rule\n    //% weight=60\n    //% blockGap=8\n    //% help=github:arcade-character-animations/docs/set-character-state\n    export function setCharacterState(sprite: Sprite, rule: Rule) {\n        const state = getStateForSprite(sprite, true);\n        state.setManualFlags(rule);\n    }\n\n    /**\n     * Clear the current state of the sprite. This will also disable any\n     * manually set state and re-enable automatic state tracking.\n     *\n     * @param sprite    The sprite to clear the state of\n     */\n    //% blockId=arcade_character_animation_clear_state\n    //% block=\"$sprite clear state\"\n    //% sprite.defl=mySprite\n    //% sprite.shadow=variables_get\n    //% weight=50\n    //% help=github:arcade-character-animations/docs/clear-character-state\n    export function clearCharacterState(sprite: Sprite) {\n        const state = getStateForSprite(sprite, false);\n        if (state) state.clearState();\n    }\n\n    /**\n     * Constructs a rule for checking the state of a sprite. Rules\n     * with more clauses will override rules with fewer clauses. Invalid\n     * rules (e.g. \"moving left AND moving right\") are ignored.\n     */\n    //% blockId=arcade_character_make_rule\n    //% block=\"$p1||and $p2 and $p3 and $p4 and $p5\"\n    //% inlineInputMode=inline\n    //% p1.shadow=arcade_character_predicate\n    //% p2.shadow=arcade_character_predicate\n    //% p3.shadow=arcade_character_predicate\n    //% p4.shadow=arcade_character_predicate\n    //% p5.shadow=arcade_character_predicate\n    //% weight=40\n    //% blockGap=8\n    //% help=github:arcade-character-animations/docs/rule\n    export function rule(p1: number, p2?: number, p3?: number, p4?: number, p5?: number): Rule {\n        let rule = p1;\n        if (p2) rule |= p2;\n        if (p3) rule |= p3;\n        if (p4) rule |= p4;\n\n        // Check for invalid rules\n        if (\n            // Moving and not moving\n            (rule & Predicate.NotMoving) && (rule & MOVING) ||\n            // moving/facing left and right\n            (rule & (Predicate.MovingLeft | Predicate.FacingLeft)) && (rule & (Predicate.MovingRight | Predicate.FacingRight)) ||\n            // moving/facing up and down\n            (rule & (Predicate.MovingUp | Predicate.FacingUp)) && (rule & (Predicate.MovingDown | Predicate.FacingDown)) ||\n\n            // moving down and on ground\n            (rule & Predicate.MovingDown) && (rule & Predicate.HittingWallDown) ||\n            // moving up and on ceiling\n            (rule & Predicate.MovingUp) && (rule & Predicate.HittingWallUp) ||\n            // moving right and on right wall\n            (rule & Predicate.MovingRight) && (rule & Predicate.HittingWallRight) ||\n            // moving left and on left wall\n            (rule & Predicate.MovingLeft) && (rule & Predicate.HittingWallLeft)\n        ) {\n            return 0;\n        }\n\n        return rule;\n    }\n\n    /**\n     * A series of images that make up an animation.\n     *\n     * @frames  An array of images\n     */\n    //% blockId=arcade_character_animation_editor block=\"$frames\"\n    //% shim=TD_ID\n    //% frames.fieldEditor=\"animation\"\n    //% frames.fieldOptions.decompileLiterals=\"true\"\n    //% frames.fieldOptions.filter=\"!tile !dialog !background\"\n    //% duplicateShadowOnDrag\n    //% weight=30\n    //% deprecated=1\n    //% blockGap=8\n    export function _animationFrames(frames: Image[]) {\n        return frames\n    }\n\n    /**\n     * A clause for a sprite animation rule.\n     */\n    //% blockId=arcade_character_predicate block=\"$predicate\"\n    //% shim=TD_ID\n    //% weight=20\n    //% help=github:arcade-character-animations/docs/predicate\n    export function _predicate(predicate: Predicate): number {\n        return predicate\n    }\n}","README.md":"# arcade-character-animations\n\nA MakeCode Arcade extension for creating rules that control when animations run on a sprite.\n\n## Basic Rules\n\nTo attach animations to a sprite, you first need to create a \"Rule\" that dictates when the animation will run. Rules are made up of several parts that each describe a sprite's behavior. For example, if we were making a platformer here are some of the rules we might use to control the walking animations:\n\n* Running Right: \"Moving\" + \"Facing Right\" + \"Is Hitting Wall Down\"\n* Running Left: \"Moving\" + \"Facing Left\" + \"Is Hitting Wall Down\"\n\nIn this example, \"Is Hitting Wall Down\" is used to check if the sprite is on the ground or not.\n\nIf we wanted to add jumping to our sprite, we could create two more rules that look like this:\n\n* Jumping Right: \"Moving\" + \"Facing Right\"\n* Jumping Left: \"Moving\" + \"Facing Left\"\n\nYou might notice that one of the jumping rules will be true whenever the running rules are true. In this extension, the most specific rule will always override all of the others. So, if we have a sprite that is moving, facing right, and hitting a wall downwards, the running rule will run since it is more specific (it has three parts instead of two).\n\n\n### Example: walking in four directions\n\nThis example shows how to make a simple top-down style game where you can walk in all four directions.\n\nhttps://makecode.com/_XV2EmJas4i8o\n\n![A picture of blocks in the top-down example](./pngs/top-down.png)\n\nOne way you could extend this example is to add animations when the character is pushing up against a wall!\n\n\n### Example: sidescrolling platformer\n\nThis example creates common animations that you might use in a platformer: running, jumping, and idling.\n\nhttps://makecode.com/_AD7hpC9pzW47\n\n![A picture of blocks in the platformer example](./pngs/platformer.png)\n\nYou could extend this example by adding different animations for when the player is jumping vs falling!\n\n\n## Supported targets\n\n* for PXT/arcade\n* for PXT/arcade\n(The metadata above is needed for package search.)\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\n\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n","docs/clear-character-state.md":"# clear character state\n\nClears the current state of a [sprite](/types/sprite).\nIf the state has been manually set, clearing the state will cause automatic state updates to start again.\nThis will also reset whatever direction the sprite is currently facing.\n\n```sig\ncharacterAnimations.clearCharacterState(sprites.create(img`\n    .\n    `)\n```\n\n## Parameters\n\n* **sprite**: a [sprite](/types/sprite) to clear the state of\n\n## Example #example\n\nIn this example, press A to \"lock\" the character into the \"MovingDown\" state.\nPress B to clear that state and automatically update the state again.\n\n```blocks\ncontroller.B.onEvent(ControllerButtonEvent.Pressed, function () {\n    characterAnimations.clearCharacterState(thePlayer)\n    thePlayer.say(\"\")\n})\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n    characterAnimations.setCharacterState(thePlayer, characterAnimations.rule(Predicate.MovingDown))\n    thePlayer.say(\"LOCKED\")\n})\nlet thePlayer: Sprite = null\nscene.setBackgroundColor(11)\nthePlayer = sprites.create(img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f 3 3 f f e e e e f f 3 3 f .\n    . f b b f b f e e f b f b b f .\n    . f b b e 1 f 4 4 f 1 e b b f .\n    f f b b f 4 4 4 4 4 4 f b b f f\n    f b b f f f e e e e f f f b b f\n    . f e e f b d d d d b f e e f .\n    . . e 4 c d d d d d d c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `, SpriteKind.Player)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f 3 3 f f e e e e f f 3 3 f .\n    . f b b f b f e e f b f b b f .\n    . f b b e 1 f 4 4 f 1 e b b f .\n    f f b b f 4 4 4 4 4 4 f b b f f\n    f b b f f f e e e e f f f b b f\n    . f e e f b d d d d b f e e f .\n    . . e 4 c d d d d d d c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `,img`\n    . . . . . . . f f . . . . . . .\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . f e 3 3 3 3 3 3 3 3 3 3 e f .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f b 3 f f e e e e f f 3 b f .\n    f f b b f b f e e f b f b b f f\n    f b b b e 1 f 4 4 f 1 e b b b f\n    . f b b e e 4 4 4 4 4 f b b f .\n    . . f 4 4 4 e d d d b f e f . .\n    . . f e 4 4 e d d d d c 4 e . .\n    . . . f e e d d b d b b f e . .\n    . . . f f 1 d 1 d 1 1 f f . . .\n    . . . . . f f f b b f . . . . .\n    `,img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f 3 3 f f e e e e f f 3 3 f .\n    . f b b f b f e e f b f b b f .\n    . f b b e 1 f 4 4 f 1 e b b f .\n    f f b b f 4 4 4 4 4 4 f b b f f\n    f b b f f f e e e e f f f b b f\n    . f e e f b d d d d b f e e f .\n    . . e 4 c d d d d d d c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `,img`\n    . . . . . . . f f . . . . . . .\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . f e 3 3 3 3 3 3 3 3 3 3 e f .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f b 3 f f e e e e f f 3 b f .\n    f f b b f b f e e f b f b b f f\n    f b b b e 1 f 4 4 f 1 e b b b f\n    . f b b f 4 4 4 4 4 e e b b f .\n    . . f e f b d d d e 4 4 4 f . .\n    . . e 4 c d d d d e 4 4 e f . .\n    . . e f b b d b d d e e f . . .\n    . . . f f 1 1 d 1 d 1 f f . . .\n    . . . . . f b b f f f . . . . .\n    `],\n100,\ncharacterAnimations.rule(Predicate.MovingDown)\n)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 3 3 3 3 3 3 e f . . .\n    . . f b 3 3 3 3 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 3 3 3 3 3 3 3 3 3 3 f .\n    . f b 3 3 3 3 3 3 3 3 3 3 b f .\n    . f b b 3 3 3 3 3 3 3 3 b b f .\n    . f b b b b b b b b b b b b f .\n    f c b b b b b b b b b b b b c f\n    f b b b b b b b b b b b b b b f\n    . f c c b b b b b b b b c c f .\n    . . e 4 c f f f f f f c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 3 3 3 3 3 3 e f . . .\n    . . f b 3 3 3 3 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f b 3 3 3 3 3 3 3 3 3 3 b f .\n    . f b b 3 3 3 3 3 3 3 3 b b f .\n    . f b b b b b b b b b b b b f .\n    f c b b b b b b b b b b b b f .\n    f b b b b b b b b b b b b c f .\n    f f b b b b b b b b b b c f . .\n    . f c c c f f f f f f f e c . .\n    . . . f b b d b d d e 4 4 e . .\n    . . . f f 1 1 d 1 d e e f . . .\n    . . . . . f b b f f f . . . . .\n    `,img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 3 3 3 3 3 3 e f . . .\n    . . f b 3 3 3 3 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 3 3 3 3 3 3 3 3 3 3 f .\n    . f b 3 3 3 3 3 3 3 3 3 3 b f .\n    . f b b 3 3 3 3 3 3 3 3 b b f .\n    . f b b b b b b b b b b b b f .\n    f c b b b b b b b b b b b b c f\n    f b b b b b b b b b b b b b b f\n    . f c c b b b b b b b b c c f .\n    . . e 4 c f f f f f f c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 3 3 3 3 3 3 e f . . .\n    . . f b 3 3 3 3 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f b 3 3 3 3 3 3 3 3 3 3 b f .\n    . f b b 3 3 3 3 3 3 3 3 b b f .\n    . f b b b b b b b b b b b b f .\n    . f b b b b b b b b b b b b c f\n    . f c b b b b b b b b b b b b f\n    . . f c b b b b b b b b b b f f\n    . . c e f f f f f f f c c c f .\n    . . e 4 4 e d d b d b b f . . .\n    . . . f e e d 1 d 1 1 f f . . .\n    . . . . . f f f b b f . . . . .\n    `],\n100,\ncharacterAnimations.rule(Predicate.MovingUp)\n)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . . . f f f f 4 4 f . . .\n    . . . . f f b f 5 4 5 5 4 f . .\n    . . . f b 3 3 e 4 5 5 5 5 f . .\n    . . f b 3 3 3 3 e 4 4 4 e f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . . f 3 3 3 3 e b 3 e e 3 3 f .\n    . . f 3 3 3 3 f f e e e 3 3 f .\n    . . f b b b b f b f e e e 3 f .\n    . . f b b b b e 1 f 4 4 e f . .\n    . f f b b b b f 4 4 4 4 f . . .\n    . f b b b b f f f e e e f . . .\n    . . f b b f 4 4 e d d d f . . .\n    . . . f f e 4 4 e d d d f . . .\n    . . . . f b e e b d b d b f . .\n    . . . . f f d 1 d 1 d 1 f f . .\n    . . . . . . f f b b f f . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f 4 4 f . . .\n    . . . . f f b f 5 4 5 5 4 f . .\n    . . . f b 3 3 e 4 5 5 5 5 f . .\n    . . f b 3 3 3 3 e 4 4 4 e f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 3 f .\n    . . f 3 3 3 3 e b 3 e e 3 3 f .\n    . . f 3 3 3 3 f f e e e 3 3 f .\n    . f f b b b b f b f e e e f . .\n    . f b b b b b e 1 f 4 4 e . . .\n    . f b b b b b f 4 4 4 4 f . . .\n    . . f b b b 4 4 e d d d f . . .\n    . . . f f f 4 4 e d d d f . . .\n    . . . f b b e e b b d d d f . .\n    . . . . f b d d 1 d 1 d b f . .\n    . . . . . f f f b b f f f . . .\n    `],\n100,\ncharacterAnimations.rule(Predicate.MovingRight)\n)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . f 4 4 f f f f . . . . . .\n    . . f 4 5 5 4 5 f b f f . . . .\n    . . f 5 5 5 5 4 e 3 3 b f . . .\n    . . f e 4 4 4 e 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 e e 3 b e 3 3 3 3 f . .\n    . f 3 3 e e e f f 3 3 3 3 f . .\n    . f 3 e e e f b f b b b b f . .\n    . . f e 4 4 f 1 e b b b b f . .\n    . . . f 4 4 4 4 f b b b b f f .\n    . . . f e e e f f f b b b b f .\n    . . . f d d d e 4 4 f b b f . .\n    . . . f d d d e 4 4 e f f . . .\n    . . f b d b d b e e b f . . . .\n    . . f f 1 d 1 d 1 d f f . . . .\n    . . . . f f b b f f . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . f 4 4 f f f f . . . . . .\n    . . f 4 5 5 4 5 f b f f . . . .\n    . . f 5 5 5 5 4 e 3 3 b f . . .\n    . . f e 4 4 4 e 3 3 3 3 b f . .\n    . f 3 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 e e 3 b e 3 3 3 3 f . .\n    . f 3 3 e e e f f 3 3 3 3 f . .\n    . . f e e e f b f b b b b f f .\n    . . . e 4 4 f 1 e b b b b b f .\n    . . . f 4 4 4 4 f b b b b b f .\n    . . . f d d d e 4 4 b b b f . .\n    . . . f d d d e 4 4 f f f . . .\n    . . f d d d b b e e b b f . . .\n    . . f b d 1 d 1 d d b f . . . .\n    . . . f f f b b f f f . . . . .\n    `],\n100,\ncharacterAnimations.rule(Predicate.MovingLeft)\n)\ncontroller.moveSprite(thePlayer)\n\n```\n\n```package\narcade-story=github:microsoft/arcade-character-animations\n```","docs/loop-character-animation.md":"# loop character animation\n\nAdds an animation to a [sprite](/types/sprite) that will loop whenever the given rule is true.\nIf there are multiple animations with rules that match a sprite's current state, the most specific rule will win.\nIf the given rule is invalid (e.g. \"Moving and NotMoving\") then the animation will be ignored.\n\nIf another animation is registered using run frames with a rule that also matches the given state,\nthe animation will start looping after the other animation has completed.\n\n```sig\ncharacterAnimations.loopFrames(\nsprites.create(img`\n    .\n    `,\n    [img`\n    .\n    `],\n    500,\ncharacterAnimations.rule(Predicate.NotMoving)\n)\n```\n\n## Parameters\n\n* **sprite**: a [sprite](/types/sprite) the sprite to loop the animation on\n* **animation**: the animation to loop when the given rule becomes true\n* **interval**: the number of milliseconds to spend on each frame of the animation before advancing to the next\n* **rule**: a rule that controls when the animation will loop on the sprite\n\n## Example #example\n\nIn this example, we create a simple walking animation for our character in all four directions.\n\n```blocks\nscene.setBackgroundColor(7)\nlet thePlayer = sprites.create(img`\n    . . . . . . f f f f . . . . . .\n    . . . . f f f 2 2 f f f . . . .\n    . . . f f f 2 2 2 2 f f f . . .\n    . . f f f e e e e e e f f f . .\n    . . f f e 2 2 2 2 2 2 e e f . .\n    . . f e 2 f f f f f f 2 e f . .\n    . . f f f f e e e e f f f f . .\n    . f f e f b f 4 4 f b f e f f .\n    . f e e 4 1 f d d f 1 4 e e f .\n    . . f e e d d d d d d e e f . .\n    . . . f e e 4 4 4 4 e e f . . .\n    . . e 4 f 2 2 2 2 2 2 f 4 e . .\n    . . 4 d f 2 2 2 2 2 2 f d 4 . .\n    . . 4 4 f 4 4 5 5 4 4 f 4 4 . .\n    . . . . . f f f f f f . . . . .\n    . . . . . f f . . f f . . . . .\n    `, SpriteKind.Player)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . . . f f f f f f . . . .\n    . . . . f f e e e e f 2 f . . .\n    . . . f f e e e e f 2 2 2 f . .\n    . . . f e e e f f e e e e f . .\n    . . . f f f f e e 2 2 2 2 e f .\n    . . . f e 2 2 2 f f f f e 2 f .\n    . . f f f f f f f e e e f f f .\n    . . f f e 4 4 e b f 4 4 e e f .\n    . . f e e 4 d 4 1 f d d e f . .\n    . . . f e e e 4 d d d d f . . .\n    . . . . f f e e 4 4 4 e f . . .\n    . . . . . 4 d d e 2 2 2 f . . .\n    . . . . . e d d e 2 2 2 f . . .\n    . . . . . f e e f 4 5 5 f . . .\n    . . . . . . f f f f f f . . . .\n    . . . . . . . f f f . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f f f . . . .\n    . . . . f f e e e e f 2 f . . .\n    . . . f f e e e e f 2 2 2 f . .\n    . . . f e e e f f e e e e f . .\n    . . . f f f f e e 2 2 2 2 e f .\n    . . . f e 2 2 2 f f f f e 2 f .\n    . . f f f f f f f e e e f f f .\n    . . f f e 4 4 e b f 4 4 e e f .\n    . . f e e 4 d 4 1 f d d e f . .\n    . . . f e e e e e d d d f . . .\n    . . . . . f 4 d d e 4 e f . . .\n    . . . . . f e d d e 2 2 f . . .\n    . . . . f f f e e f 5 5 f f . .\n    . . . . f f f f f f f f f f . .\n    . . . . . f f . . . f f f . . .\n    `,img`\n    . . . . . . f f f f f f . . . .\n    . . . . f f e e e e f 2 f . . .\n    . . . f f e e e e f 2 2 2 f . .\n    . . . f e e e f f e e e e f . .\n    . . . f f f f e e 2 2 2 2 e f .\n    . . . f e 2 2 2 f f f f e 2 f .\n    . . f f f f f f f e e e f f f .\n    . . f f e 4 4 e b f 4 4 e e f .\n    . . f e e 4 d 4 1 f d d e f . .\n    . . . f e e e 4 d d d d f . . .\n    . . . . f f e e 4 4 4 e f . . .\n    . . . . . 4 d d e 2 2 2 f . . .\n    . . . . . e d d e 2 2 2 f . . .\n    . . . . . f e e f 4 5 5 f . . .\n    . . . . . . f f f f f f . . . .\n    . . . . . . . f f f . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f f f . . . .\n    . . . . f f e e e e f 2 f . . .\n    . . . f f e e e e f 2 2 2 f . .\n    . . . f e e e f f e e e e f . .\n    . . . f f f f e e 2 2 2 2 e f .\n    . . . f e 2 2 2 f f f f e 2 f .\n    . . f f f f f f f e e e f f f .\n    . . f f e 4 4 e b f 4 4 e e f .\n    . . f e e 4 d 4 1 f d d e f . .\n    . . . f e e e 4 d d d d f . . .\n    . . . . 4 d d e 4 4 4 e f . . .\n    . . . . e d d e 2 2 2 2 f . . .\n    . . . . f e e f 4 4 5 5 f f . .\n    . . . . f f f f f f f f f f . .\n    . . . . . f f . . . f f f . . .\n    `],\n200,\ncharacterAnimations.rule(Predicate.MovingRight)\n)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . . . f f f f . . . . . .\n    . . . . f f f 2 2 f f f . . . .\n    . . . f f f 2 2 2 2 f f f . . .\n    . . f f f e e e e e e f f f . .\n    . . f f e 2 2 2 2 2 2 e e f . .\n    . . f e 2 f f f f f f 2 e f . .\n    . . f f f f e e e e f f f f . .\n    . f f e f b f 4 4 f b f e f f .\n    . f e e 4 1 f d d f 1 4 e e f .\n    . . f e e d d d d d d e e f . .\n    . . . f e e 4 4 4 4 e e f . . .\n    . . e 4 f 2 2 2 2 2 2 f 4 e . .\n    . . 4 d f 2 2 2 2 2 2 f d 4 . .\n    . . 4 4 f 4 4 5 5 4 4 f 4 4 . .\n    . . . . . f f f f f f . . . . .\n    . . . . . f f . . f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f . . . . . .\n    . . . . f f f 2 2 f f f . . . .\n    . . . f f f 2 2 2 2 f f f . . .\n    . . f f f e e e e e e f f f . .\n    . . f f e 2 2 2 2 2 2 e e f . .\n    . f f e 2 f f f f f f 2 e f f .\n    . f f f f f e e e e f f f f f .\n    . . f e f b f 4 4 f b f e f . .\n    . . f e 4 1 f d d f 1 4 e f . .\n    . . . f e 4 d d d d 4 e f e . .\n    . . f e f 2 2 2 2 e d d 4 e . .\n    . . e 4 f 2 2 2 2 e d d e . . .\n    . . . . f 4 4 5 5 f e e . . . .\n    . . . . f f f f f f f . . . . .\n    . . . . f f f . . . . . . . . .\n    `,img`\n    . . . . . . f f f f . . . . . .\n    . . . . f f f 2 2 f f f . . . .\n    . . . f f f 2 2 2 2 f f f . . .\n    . . f f f e e e e e e f f f . .\n    . . f f e 2 2 2 2 2 2 e e f . .\n    . . f e 2 f f f f f f 2 e f . .\n    . . f f f f e e e e f f f f . .\n    . f f e f b f 4 4 f b f e f f .\n    . f e e 4 1 f d d f 1 4 e e f .\n    . . f e e d d d d d d e e f . .\n    . . . f e e 4 4 4 4 e e f . . .\n    . . e 4 f 2 2 2 2 2 2 f 4 e . .\n    . . 4 d f 2 2 2 2 2 2 f d 4 . .\n    . . 4 4 f 4 4 5 5 4 4 f 4 4 . .\n    . . . . . f f f f f f . . . . .\n    . . . . . f f . . f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f . . . . . .\n    . . . . f f f 2 2 f f f . . . .\n    . . . f f f 2 2 2 2 f f f . . .\n    . . f f f e e e e e e f f f . .\n    . . f e e 2 2 2 2 2 2 e f f . .\n    . f f e 2 f f f f f f 2 e f f .\n    . f f f f f e e e e f f f f f .\n    . . f e f b f 4 4 f b f e f . .\n    . . f e 4 1 f d d f 1 4 e f . .\n    . . e f e 4 d d d d 4 e f . . .\n    . . e 4 d d e 2 2 2 2 f e f . .\n    . . . e d d e 2 2 2 2 f 4 e . .\n    . . . . e e f 5 5 4 4 f . . . .\n    . . . . . f f f f f f f . . . .\n    . . . . . . . . . f f f . . . .\n    `],\n200,\ncharacterAnimations.rule(Predicate.MovingDown)\n)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . f f f f f f . . . . . .\n    . . . f 2 f e e e e f f . . . .\n    . . f 2 2 2 f e e e e f f . . .\n    . . f e e e e f f e e e f . . .\n    . f e 2 2 2 2 e e f f f f . . .\n    . f 2 e f f f f 2 2 2 e f . . .\n    . f f f e e e f f f f f f f . .\n    . f e e 4 4 f b e 4 4 e f f . .\n    . . f e d d f 1 4 d 4 e e f . .\n    . . . f d d d d 4 e e e f . . .\n    . . . f e 4 4 4 e e f f . . . .\n    . . . f 2 2 2 e d d 4 . . . . .\n    . . . f 2 2 2 e d d e . . . . .\n    . . . f 5 5 4 f e e f . . . . .\n    . . . . f f f f f f . . . . . .\n    . . . . . . f f f . . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . f f f f f f . . . . . .\n    . . . f 2 f e e e e f f . . . .\n    . . f 2 2 2 f e e e e f f . . .\n    . . f e e e e f f e e e f . . .\n    . f e 2 2 2 2 e e f f f f . . .\n    . f 2 e f f f f 2 2 2 e f . . .\n    . f f f e e e f f f f f f f . .\n    . f e e 4 4 f b e 4 4 e f f . .\n    . . f e d d f 1 4 d 4 e e f . .\n    . . . f d d d e e e e e f . . .\n    . . . f e 4 e d d 4 f . . . . .\n    . . . f 2 2 e d d e f . . . . .\n    . . f f 5 5 f e e f f f . . . .\n    . . f f f f f f f f f f . . . .\n    . . . f f f . . . f f . . . . .\n    `,img`\n    . . . . f f f f f f . . . . . .\n    . . . f 2 f e e e e f f . . . .\n    . . f 2 2 2 f e e e e f f . . .\n    . . f e e e e f f e e e f . . .\n    . f e 2 2 2 2 e e f f f f . . .\n    . f 2 e f f f f 2 2 2 e f . . .\n    . f f f e e e f f f f f f f . .\n    . f e e 4 4 f b e 4 4 e f f . .\n    . . f e d d f 1 4 d 4 e e f . .\n    . . . f d d d d 4 e e e f . . .\n    . . . f e 4 4 4 e e f f . . . .\n    . . . f 2 2 2 e d d 4 . . . . .\n    . . . f 2 2 2 e d d e . . . . .\n    . . . f 5 5 4 f e e f . . . . .\n    . . . . f f f f f f . . . . . .\n    . . . . . . f f f . . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . f f f f f f . . . . . .\n    . . . f 2 f e e e e f f . . . .\n    . . f 2 2 2 f e e e e f f . . .\n    . . f e e e e f f e e e f . . .\n    . f e 2 2 2 2 e e f f f f . . .\n    . f 2 e f f f f 2 2 2 e f . . .\n    . f f f e e e f f f f f f f . .\n    . f e e 4 4 f b e 4 4 e f f . .\n    . . f e d d f 1 4 d 4 e e f . .\n    . . . f d d d d 4 e e e f . . .\n    . . . f e 4 4 4 e d d 4 . . . .\n    . . . f 2 2 2 2 e d d e . . . .\n    . . f f 5 5 4 4 f e e f . . . .\n    . . f f f f f f f f f f . . . .\n    . . . f f f . . . f f . . . . .\n    `],\n200,\ncharacterAnimations.rule(Predicate.MovingLeft)\n)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . . . f f f f . . . . . .\n    . . . . f f e e e e f f . . . .\n    . . . f e e e f f e e e f . . .\n    . . f f f f f 2 2 f f f f f . .\n    . . f f e 2 e 2 2 e 2 e f f . .\n    . . f e 2 f 2 f f 2 f 2 e f . .\n    . . f f f 2 2 e e 2 2 f f f . .\n    . f f e f 2 f e e f 2 f e f f .\n    . f e e f f e e e e f e e e f .\n    . . f e e e e e e e e e e f . .\n    . . . f e e e e e e e e f . . .\n    . . e 4 f f f f f f f f 4 e . .\n    . . 4 d f 2 2 2 2 2 2 f d 4 . .\n    . . 4 4 f 4 4 4 4 4 4 f 4 4 . .\n    . . . . . f f f f f f . . . . .\n    . . . . . f f . . f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f . . . . . .\n    . . . . f f e e e e f f . . . .\n    . . . f e e e f f e e e f . . .\n    . . . f f f f 2 2 f f f f . . .\n    . . f f e 2 e 2 2 e 2 e f f . .\n    . . f e 2 f 2 f f f 2 f e f . .\n    . . f f f 2 f e e 2 2 f f f . .\n    . . f e 2 f f e e 2 f e e f . .\n    . f f e f f e e e f e e e f f .\n    . f f e e e e e e e e e e f f .\n    . . . f e e e e e e e e f . . .\n    . . . e f f f f f f f f 4 e . .\n    . . . 4 f 2 2 2 2 2 e d d 4 . .\n    . . . e f f f f f f e e 4 . . .\n    . . . . f f f . . . . . . . . .\n    `,img`\n    . . . . . . f f f f . . . . . .\n    . . . . f f e e e e f f . . . .\n    . . . f e e e f f e e e f . . .\n    . . f f f f f 2 2 f f f f f . .\n    . . f f e 2 e 2 2 e 2 e f f . .\n    . . f e 2 f 2 f f 2 f 2 e f . .\n    . . f f f 2 2 e e 2 2 f f f . .\n    . f f e f 2 f e e f 2 f e f f .\n    . f e e f f e e e e f e e e f .\n    . . f e e e e e e e e e e f . .\n    . . . f e e e e e e e e f . . .\n    . . e 4 f f f f f f f f 4 e . .\n    . . 4 d f 2 2 2 2 2 2 f d 4 . .\n    . . 4 4 f 4 4 4 4 4 4 f 4 4 . .\n    . . . . . f f f f f f . . . . .\n    . . . . . f f . . f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f . . . . . .\n    . . . . f f e e e e f f . . . .\n    . . . f e e e f f e e e f . . .\n    . . . f f f f 2 2 f f f f . . .\n    . . f f e 2 e 2 2 e 2 e f f . .\n    . . f e f 2 f f f 2 f 2 e f . .\n    . . f f f 2 2 e e f 2 f f f . .\n    . . f e e f 2 e e f f 2 e f . .\n    . f f e e e f e e e f f e f f .\n    . f f e e e e e e e e e e f f .\n    . . . f e e e e e e e e f . . .\n    . . e 4 f f f f f f f f e . . .\n    . . 4 d d e 2 2 2 2 2 f 4 . . .\n    . . . 4 e e f f f f f f e . . .\n    . . . . . . . . . f f f . . . .\n    `],\n200,\ncharacterAnimations.rule(Predicate.MovingUp)\n)\ncontroller.moveSprite(thePlayer)\n\n```\n\n```package\narcade-story=github:microsoft/arcade-character-animations\n```","docs/matches-rule.md":"# matches rule\n\nChecks the state of a sprite and returns true if it currently fulfills the given rule.\n\nA sprite will not match any \"Facing\" rule unless it has at least one animation that uses that rule.\n\n```sig\ncharacterAnimations.matchesRule(sprites.create(img`\n    .\n    `, characterAnimations.rule(Predicate.NotMoving))\n```\n\n## Parameters\n\n* **sprite**: a [sprite](/types/sprite) to check the state of\n* **rule**: a rule to validate against the state of the sprite\n\n## Example #example\n\nThis example checks to see if the player is facing left or right in the A button event so that the projectiles fire in the correct direction.\n\n```blocks\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n    if (characterAnimations.matchesRule(thePlayer, characterAnimations.rule(Predicate.FacingLeft))) {\n        projectile = sprites.createProjectileFromSprite(img`\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . c b a c . . . . . .\n            . . . . c c b c f a c . . . . .\n            . . . . a f b b b a c . . . . .\n            . . . . a f f b a f c c . . . .\n            . . . . c b b a f f c . . . . .\n            . . . . . b b a f a . . . . . .\n            . . . . . . c b b . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            `, thePlayer, -100, 0)\n    } else {\n        projectile = sprites.createProjectileFromSprite(img`\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . c b a c . . . . . .\n            . . . . c c b c f a c . . . . .\n            . . . . a f b b b a c . . . . .\n            . . . . a f f b a f c c . . . .\n            . . . . c b b a f f c . . . . .\n            . . . . . b b a f a . . . . . .\n            . . . . . . c b b . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            . . . . . . . . . . . . . . . .\n            `, thePlayer, 100, 0)\n    }\n})\nlet projectile: Sprite = null\nlet thePlayer: Sprite = null\nscene.setBackgroundColor(11)\nthePlayer = sprites.create(img`\n    . . . . . . . . . . . .\n    . . . f f f f f f . . .\n    . f f f e e e e e f . .\n    f f f e e e e e e e f .\n    f f f f e e e e e e e f\n    f f f f f e e e 4 e e f\n    f f f f e e e 4 4 e e f\n    f f f f 4 4 4 4 4 e f f\n    f f 4 e 4 f f 4 4 e f .\n    f f 4 d 4 d d d d f . .\n    . f f f 4 d d b b f . .\n    . 4 d d e 4 4 4 e f . .\n    . e d d e 1 1 1 1 f . .\n    . f e e f 6 6 6 6 f f .\n    . f f f f f f f f f f .\n    . . f f . . . f f f . .\n    `, SpriteKind.Player)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . . . . . . . . .\n    . . . f f f f f f . . .\n    . f f f e e e e e f . .\n    f f f e e e e e e e f .\n    f f f f e e e e e e e f\n    f f f f f e e e 4 e e f\n    f f f f e e e 4 4 e e f\n    f f f f 4 4 4 4 4 e f f\n    f f 4 e 4 f f 4 4 e f .\n    f f 4 d 4 d d d d f . .\n    . f f f 4 d d b b f . .\n    . 4 d d e 4 4 4 e f . .\n    . e d d e 1 1 1 1 f . .\n    . f e e f 6 6 6 6 f f .\n    . f f f f f f f f f f .\n    . . f f . . . f f f . .\n    `,img`\n    . . . . . . . . . . . .\n    . . . f f f f f f . . .\n    . f f f e e e e e f . .\n    f f f e e e e e e e f .\n    f f f f e e e e e e e f\n    f f f f f e e e 4 e e f\n    f f f f e e e 4 4 e e f\n    f f f f 4 4 4 4 4 e f f\n    f f 4 e 4 f f 4 4 e f .\n    . f 4 d 4 d d d d f . .\n    . f f f e e d b b f . .\n    . . f 4 d d e 4 e f . .\n    . . f e d d e 1 1 f . .\n    . f f f e e f 6 6 f f .\n    . f f f f f f f f f f .\n    . . f f . . . f f f . .\n    `,img`\n    . . . . f f f f f . . .\n    . . f f e e e e e f . .\n    . f f e e e e e e e f .\n    f f f f e e e e e e e f\n    f f f f f e e e 4 e e f\n    f f f f e e e 4 4 e e f\n    f f f f 4 4 4 4 4 e f f\n    f f 4 e 4 f f 4 4 e f f\n    . f 4 d 4 d d d d f f .\n    . f f f 4 d d b b f . .\n    . . f e e 4 4 4 e f . .\n    . . 4 d d e 1 1 1 f . .\n    . . e d d e 1 1 1 f . .\n    . . f e e f 6 6 6 f . .\n    . . . f f f f f f . . .\n    . . . . f f f . . . . .\n    `],\n100,\ncharacterAnimations.rule(Predicate.FacingRight)\n)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . . . . . . . . .\n    . . . f f f f f f . . .\n    . . f e e e e e f f f .\n    . f e e e e e e e f f f\n    f e e e e e e e f f f f\n    f e e 4 e e e f f f f f\n    f e e 4 4 e e e f f f f\n    f f e 4 4 4 4 4 f f f f\n    . f e 4 4 f f 4 e 4 f f\n    . . f d d d d 4 d 4 f f\n    . . f b b d d 4 f f f .\n    . . f e 4 4 4 e d d 4 .\n    . . f 1 1 1 1 e d d e .\n    . f f 6 6 6 6 f e e f .\n    . f f f f f f f f f f .\n    . . f f f . . . f f . .\n    `,img`\n    . . . . . . . . . . . .\n    . . . f f f f f f . . .\n    . . f e e e e e f f f .\n    . f e e e e e e e f f f\n    f e e e e e e e f f f f\n    f e e 4 e e e f f f f f\n    f e e 4 4 e e e f f f f\n    f f e 4 4 4 4 4 f f f f\n    . f e 4 4 f f 4 e 4 f f\n    . . f d d d d 4 d 4 f .\n    . . f b b d e e f f f .\n    . . f e 4 e d d 4 f . .\n    . . f 1 1 e d d e f . .\n    . f f 6 6 f e e f f f .\n    . f f f f f f f f f f .\n    . . f f f . . . f f . .\n    `,img`\n    . . . f f f f f . . . .\n    . . f e e e e e f f . .\n    . f e e e e e e e f f .\n    f e e e e e e e f f f f\n    f e e 4 e e e f f f f f\n    f e e 4 4 e e e f f f f\n    f f e 4 4 4 4 4 f f f f\n    f f e 4 4 f f 4 e 4 f f\n    . f f d d d d 4 d 4 f .\n    . . f b b d d 4 f f f .\n    . . f e 4 4 4 e e f . .\n    . . f 1 1 1 e d d 4 . .\n    . . f 1 1 1 e d d e . .\n    . . f 6 6 6 f e e f . .\n    . . . f f f f f f . . .\n    . . . . . f f f . . . .\n    `],\n100,\ncharacterAnimations.rule(Predicate.FacingLeft)\n)\ncontroller.moveSprite(thePlayer)\n\n```\n\n```package\narcade-story=github:microsoft/arcade-character-animations\n```","docs/predicate.md":"# predicate\n\nA predicate is a statement that describes how a [sprite](/types/sprite) is currently acting.\nFor example, the predicate \"NotMoving\" applies to a sprite that is not moving.\nPredicates can be combined to form rules.\n\n```sig\nPredicate.NotMoving\n```\n\n","docs/run-character-animation.md":"# run character animation\n\nAdds an animation to a [sprite](/types/sprite) that will run whenever the given rule becomes true.\nIf there are multiple animations with rules that match a sprite's current state, the most specific rule will win.\nIf the given rule is invalid (e.g. \"Moving and NotMoving\") then the animation will be ignored.\n\nThis function is useful for animating when a sprite moves from one state to another.\nFor example, if a falling sprite lands on the ground you can run a landing animation before looping an idle animation.\n\n```sig\ncharacterAnimations.runFrames(\nsprites.create(img`\n    .\n    `,\n    [img`\n    .\n    `],\n    500,\ncharacterAnimations.rule(Predicate.NotMoving)\n)\n```\n\n## Parameters\n\n* **sprite**: a [sprite](/types/sprite) the sprite to run the animation on\n* **animation**: the animation to run when the given rule becomes true\n* **interval**: the number of milliseconds to spend on each frame of the animation before advancing to the next\n* **rule**: a rule that controls when the animation will run on the sprite\n\n## Example #example\n\nIn this example we animate a bug that jumps when you press the A button.\nIt has a jumping animation that runs when it starts moving up and a landing animation that runs when it stops moving.\nAlso note the looping idle animation that doesn't run until the landing animation is complete even though it has the same rule.\n\n```blocks\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n    jumper.ay = 500\n    jumper.vy = -200\n})\nlet jumper: Sprite = null\njumper = sprites.create(img`\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . 6 . . 6 6 6 6 6 . . 6 . .\n    . 6 . 6 . 6 6 6 6 6 . 6 . 6 .\n    6 . . . 6 6 6 6 6 6 6 . . . 6\n    `, SpriteKind.Player)\ncharacterAnimations.runFrames(\njumper,\n[img`\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . 6 . . 6 6 6 6 6 . . 6 . .\n    . 6 . 6 . 6 6 6 6 6 . 6 . 6 .\n    6 . . . 6 6 6 6 6 6 6 . . . 6\n    `,img`\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . 6 6 . 6 6 6 6 6 . 6 6 . .\n    . 6 . . 6 6 6 6 6 6 6 . . 6 .\n    6 . . . . . . . . . . . . . 6\n    `,img`\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . 6 . 6 6 6 6 6 . 6 . . .\n    . . 6 . 6 6 6 6 6 6 6 . 6 . .\n    . 6 . . . . . . . . . . . 6 .\n    6 . . . . . . . . . . . . . 6\n    . . . . . . . . . . . . . . .\n    `,img`\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . 6 6 6 6 6 6 6 . . . .\n    . . . 6 . . . . . . . 6 . . .\n    . . . 6 . . . . . . . 6 . . .\n    . . 6 . . . . . . . . . 6 . .\n    . . 6 . . . . . . . . . 6 . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    `,img`\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . 6 6 6 6 6 6 6 . . . .\n    . . . . 6 . . . . . 6 . . . .\n    . . . . 6 . . . . . 6 . . . .\n    . . . 6 . . . . . . . 6 . . .\n    . . . 6 . . . . . . . 6 . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    `],\n25,\ncharacterAnimations.rule(Predicate.MovingUp)\n)\ncharacterAnimations.runFrames(\njumper,\n[img`\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . 6 6 6 6 6 6 6 . . . .\n    . . . . 6 . . . . . 6 . . . .\n    . . . . 6 . . . . . 6 . . . .\n    . . . 6 . . . . . . . 6 . . .\n    . . . 6 . . . . . . . 6 . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . 6 6 6 6 6 6 6 . . . .\n    . . . 6 . . . . . . . 6 . . .\n    . . . 6 . . . . . . . 6 . . .\n    . . 6 . . . . . . . . . 6 . .\n    . . 6 . . . . . . . . . 6 . .\n    . . . . . . . . . . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . 6 . 6 6 6 6 6 . 6 . . .\n    . . 6 . 6 6 6 6 6 6 6 . 6 . .\n    . 6 . . . . . . . . . . . 6 .\n    6 . . . . . . . . . . . . . 6\n    `,img`\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . 6 6 . 6 6 6 6 6 . 6 6 . .\n    . 6 . . 6 6 6 6 6 6 6 . . 6 .\n    6 . . . . . . . . . . . . . 6\n    `,img`\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . 6 . . 6 6 6 6 6 . . 6 . .\n    . 6 . 6 . 6 6 6 6 6 . 6 . 6 .\n    6 . . . 6 6 6 6 6 6 6 . . . 6\n    `],\n10,\ncharacterAnimations.rule(Predicate.NotMoving)\n)\ncharacterAnimations.loopFrames(\njumper,\n[img`\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . 6 . . 6 6 6 6 6 . . 6 . .\n    . 6 . 6 . 6 6 6 6 6 . 6 . 6 .\n    6 . . . 6 6 6 6 6 6 6 . . . 6\n    `,img`\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . . . . 6 1 6 1 6 . . . . .\n    . . . . . 6 6 6 6 6 . . . . .\n    . . 6 6 . 6 6 6 6 6 . 6 6 . .\n    . 6 . . 6 6 6 6 6 6 6 . . 6 .\n    6 . . . . . . . . . . . . . 6\n    `],\n500,\ncharacterAnimations.rule(Predicate.NotMoving)\n)\njumper.bottom = 120\ngame.onUpdate(function () {\n    if (jumper.bottom > 120) {\n        jumper.ay = 0\n        jumper.vy = 0\n        jumper.bottom = 120\n    }\n})\n\n```\n\n```package\narcade-story=github:microsoft/arcade-character-animations\n```","docs/set-character-animations-enabled.md":"# set character animations enabled\n\nEnables or disables all animations with rules on a given [sprite](/types/sprite).\nThis function is useful if you want to temporarily run a normal animation on a sprite without it being overridden by another animation.\n\n```sig\ncharacterAnimations.setCharacterAnimationsEnabled(sprites.create(img`\n    .\n    `, true)\n```\n\n## Parameters\n\n* **sprite**: a [sprite](/types/sprite) to set character animations enabled on\n* **enabled**: a [boolean](/types/boolean) indicating whether the character animations are enabled or not\n\n## Example #example\n\nIn this example, we create a character and an enemy sprite. When the character overlaps with the enemy, we bump them away and temporarily disable the character animations so that we can show a different animation while they are temporarily invincible. We then re-enable the character animations along with overlap events and controls for the sprite.\n\n```blocks\nsprites.onOverlap(SpriteKind.Player, SpriteKind.Enemy, function (sprite, otherSprite) {\n    characterAnimations.setCharacterAnimationsEnabled(sprite, false)\n    animation.runImageAnimation(\n    sprite,\n    [img`\n        . . . . . . f f f f . . . . . .\n        . . . . f f f 2 2 f f f . . . .\n        . . . f f f 2 2 2 2 f f f . . .\n        . . f f f e e e e e e f f f . .\n        . . f f e 2 2 2 2 2 2 e e f . .\n        . . f e 2 f f f f f f 2 e f . .\n        . . f f f f e e e e f f f f . .\n        . f f e f b f 4 4 f b f e f f .\n        . f e e 4 1 f d d f 1 4 e e f .\n        . . f e e d d d d d d e e f . .\n        . . . f e e 4 4 4 4 e e f . . .\n        . . e 4 f 2 2 2 2 2 2 f 4 e . .\n        . . 4 d f 2 2 2 2 2 2 f d 4 . .\n        . . 4 4 f 4 4 5 5 4 4 f 4 4 . .\n        . . . . . f f f f f f . . . . .\n        . . . . . f f . . f f . . . . .\n        `,img`\n        . . . . . . 2 2 2 2 . . . . . .\n        . . . . 2 2 2 f f 2 2 2 . . . .\n        . . . 2 2 2 f f f f 2 2 2 . . .\n        . . 2 2 2 f f f f f f 2 2 2 . .\n        . . 2 2 f f f f f f f f f 2 . .\n        . . 2 f f 2 2 2 2 2 2 f f 2 . .\n        . . 2 2 2 2 f f f f 2 2 2 2 . .\n        . 2 2 f 2 f 2 f f 2 f 2 f 2 2 .\n        . 2 f f f f 2 f f 2 f f f f 2 .\n        . . 2 f f f f f f f f f f 2 . .\n        . . . 2 f f f f f f f f 2 . . .\n        . . f f 2 f f f f f f 2 f f . .\n        . . f f 2 f f f f f f 2 f f . .\n        . . f f 2 f f f f f f 2 f f . .\n        . . . . . 2 2 2 2 2 2 . . . . .\n        . . . . . 2 2 . . 2 2 . . . . .\n        `],\n    100,\n    true\n    )\n    sprite.setFlag(SpriteFlag.GhostThroughSprites, true)\n    angle = Math.atan2(sprite.y - otherSprite.y, sprite.x - otherSprite.x)\n    controller.moveSprite(sprite, 0, 0)\n    sprite.setVelocity(60 * Math.cos(angle), 60 * Math.sin(angle))\n    pause(400)\n    sprite.setVelocity(0, 0)\n    animation.stopAnimation(animation.AnimationTypes.All, sprite)\n    controller.moveSprite(sprite)\n    sprite.setFlag(SpriteFlag.GhostThroughSprites, false)\n    characterAnimations.setCharacterAnimationsEnabled(sprite, true)\n})\nlet angle = 0\nscene.setBackgroundColor(7)\nlet thePlayer = sprites.create(img`\n    . . . . . . f f f f . . . . . .\n    . . . . f f f 2 2 f f f . . . .\n    . . . f f f 2 2 2 2 f f f . . .\n    . . f f f e e e e e e f f f . .\n    . . f f e 2 2 2 2 2 2 e e f . .\n    . . f e 2 f f f f f f 2 e f . .\n    . . f f f f e e e e f f f f . .\n    . f f e f b f 4 4 f b f e f f .\n    . f e e 4 1 f d d f 1 4 e e f .\n    . . f e e d d d d d d e e f . .\n    . . . f e e 4 4 4 4 e e f . . .\n    . . e 4 f 2 2 2 2 2 2 f 4 e . .\n    . . 4 d f 2 2 2 2 2 2 f d 4 . .\n    . . 4 4 f 4 4 5 5 4 4 f 4 4 . .\n    . . . . . f f f f f f . . . . .\n    . . . . . f f . . f f . . . . .\n    `, SpriteKind.Player)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . . . f f f f f f . . . .\n    . . . . f f e e e e f 2 f . . .\n    . . . f f e e e e f 2 2 2 f . .\n    . . . f e e e f f e e e e f . .\n    . . . f f f f e e 2 2 2 2 e f .\n    . . . f e 2 2 2 f f f f e 2 f .\n    . . f f f f f f f e e e f f f .\n    . . f f e 4 4 e b f 4 4 e e f .\n    . . f e e 4 d 4 1 f d d e f . .\n    . . . f e e e 4 d d d d f . . .\n    . . . . f f e e 4 4 4 e f . . .\n    . . . . . 4 d d e 2 2 2 f . . .\n    . . . . . e d d e 2 2 2 f . . .\n    . . . . . f e e f 4 5 5 f . . .\n    . . . . . . f f f f f f . . . .\n    . . . . . . . f f f . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f f f . . . .\n    . . . . f f e e e e f 2 f . . .\n    . . . f f e e e e f 2 2 2 f . .\n    . . . f e e e f f e e e e f . .\n    . . . f f f f e e 2 2 2 2 e f .\n    . . . f e 2 2 2 f f f f e 2 f .\n    . . f f f f f f f e e e f f f .\n    . . f f e 4 4 e b f 4 4 e e f .\n    . . f e e 4 d 4 1 f d d e f . .\n    . . . f e e e e e d d d f . . .\n    . . . . . f 4 d d e 4 e f . . .\n    . . . . . f e d d e 2 2 f . . .\n    . . . . f f f e e f 5 5 f f . .\n    . . . . f f f f f f f f f f . .\n    . . . . . f f . . . f f f . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.MovingRight)\n)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . . . f f f f . . . . . .\n    . . . . f f f 2 2 f f f . . . .\n    . . . f f f 2 2 2 2 f f f . . .\n    . . f f f e e e e e e f f f . .\n    . . f f e 2 2 2 2 2 2 e e f . .\n    . . f e 2 f f f f f f 2 e f . .\n    . . f f f f e e e e f f f f . .\n    . f f e f b f 4 4 f b f e f f .\n    . f e e 4 1 f d d f 1 4 e e f .\n    . . f e e d d d d d d e e f . .\n    . . . f e e 4 4 4 4 e e f . . .\n    . . e 4 f 2 2 2 2 2 2 f 4 e . .\n    . . 4 d f 2 2 2 2 2 2 f d 4 . .\n    . . 4 4 f 4 4 5 5 4 4 f 4 4 . .\n    . . . . . f f f f f f . . . . .\n    . . . . . f f . . f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f . . . . . .\n    . . . . f f f 2 2 f f f . . . .\n    . . . f f f 2 2 2 2 f f f . . .\n    . . f f f e e e e e e f f f . .\n    . . f f e 2 2 2 2 2 2 e e f . .\n    . f f e 2 f f f f f f 2 e f f .\n    . f f f f f e e e e f f f f f .\n    . . f e f b f 4 4 f b f e f . .\n    . . f e 4 1 f d d f 1 4 e f . .\n    . . . f e 4 d d d d 4 e f e . .\n    . . f e f 2 2 2 2 e d d 4 e . .\n    . . e 4 f 2 2 2 2 e d d e . . .\n    . . . . f 4 4 5 5 f e e . . . .\n    . . . . f f f f f f f . . . . .\n    . . . . f f f . . . . . . . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.MovingDown)\n)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . f f f f f f . . . . . .\n    . . . f 2 f e e e e f f . . . .\n    . . f 2 2 2 f e e e e f f . . .\n    . . f e e e e f f e e e f . . .\n    . f e 2 2 2 2 e e f f f f . . .\n    . f 2 e f f f f 2 2 2 e f . . .\n    . f f f e e e f f f f f f f . .\n    . f e e 4 4 f b e 4 4 e f f . .\n    . . f e d d f 1 4 d 4 e e f . .\n    . . . f d d d d 4 e e e f . . .\n    . . . f e 4 4 4 e e f f . . . .\n    . . . f 2 2 2 e d d 4 . . . . .\n    . . . f 2 2 2 e d d e . . . . .\n    . . . f 5 5 4 f e e f . . . . .\n    . . . . f f f f f f . . . . . .\n    . . . . . . f f f . . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . f f f f f f . . . . . .\n    . . . f 2 f e e e e f f . . . .\n    . . f 2 2 2 f e e e e f f . . .\n    . . f e e e e f f e e e f . . .\n    . f e 2 2 2 2 e e f f f f . . .\n    . f 2 e f f f f 2 2 2 e f . . .\n    . f f f e e e f f f f f f f . .\n    . f e e 4 4 f b e 4 4 e f f . .\n    . . f e d d f 1 4 d 4 e e f . .\n    . . . f d d d e e e e e f . . .\n    . . . f e 4 e d d 4 f . . . . .\n    . . . f 2 2 e d d e f . . . . .\n    . . f f 5 5 f e e f f f . . . .\n    . . f f f f f f f f f f . . . .\n    . . . f f f . . . f f . . . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.MovingLeft)\n)\ncharacterAnimations.loopFrames(\nthePlayer,\n[img`\n    . . . . . . f f f f . . . . . .\n    . . . . f f e e e e f f . . . .\n    . . . f e e e f f e e e f . . .\n    . . f f f f f 2 2 f f f f f . .\n    . . f f e 2 e 2 2 e 2 e f f . .\n    . . f e 2 f 2 f f 2 f 2 e f . .\n    . . f f f 2 2 e e 2 2 f f f . .\n    . f f e f 2 f e e f 2 f e f f .\n    . f e e f f e e e e f e e e f .\n    . . f e e e e e e e e e e f . .\n    . . . f e e e e e e e e f . . .\n    . . e 4 f f f f f f f f 4 e . .\n    . . 4 d f 2 2 2 2 2 2 f d 4 . .\n    . . 4 4 f 4 4 4 4 4 4 f 4 4 . .\n    . . . . . f f f f f f . . . . .\n    . . . . . f f . . f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f . . . . . .\n    . . . . f f e e e e f f . . . .\n    . . . f e e e f f e e e f . . .\n    . . . f f f f 2 2 f f f f . . .\n    . . f f e 2 e 2 2 e 2 e f f . .\n    . . f e 2 f 2 f f f 2 f e f . .\n    . . f f f 2 f e e 2 2 f f f . .\n    . . f e 2 f f e e 2 f e e f . .\n    . f f e f f e e e f e e e f f .\n    . f f e e e e e e e e e e f f .\n    . . . f e e e e e e e e f . . .\n    . . . e f f f f f f f f 4 e . .\n    . . . 4 f 2 2 2 2 2 e d d 4 . .\n    . . . e f f f f f f e e 4 . . .\n    . . . . f f f . . . . . . . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.MovingUp)\n)\ncontroller.moveSprite(thePlayer)\nlet mySprite2 = sprites.create(img`\n    . . . . c c c c c c . . . . . .\n    . . . c 6 7 7 7 7 6 c . . . . .\n    . . c 7 7 7 7 7 7 7 7 c . . . .\n    . c 6 7 7 7 7 7 7 7 7 6 c . . .\n    . c 7 c 6 6 6 6 c 7 7 7 c . . .\n    . f 7 6 f 6 6 f 6 7 7 7 f . . .\n    . f 7 7 7 7 7 7 7 7 7 7 f . . .\n    . . f 7 7 7 7 6 c 7 7 6 f c . .\n    . . . f c c c c 7 7 6 f 7 7 c .\n    . . c 7 2 7 7 7 6 c f 7 7 7 7 c\n    . c 7 7 2 7 7 c f c 6 7 7 6 c c\n    c 1 1 1 1 7 6 f c c 6 6 6 c . .\n    f 1 1 1 1 1 6 6 c 6 6 6 6 f . .\n    f 6 1 1 1 1 1 6 6 6 6 6 c f . .\n    . f 6 1 1 1 1 1 1 6 6 6 f . . .\n    . . c c c c c c c c c f . . . .\n    `, SpriteKind.Enemy)\n\n```\n\n```package\narcade-story=github:microsoft/arcade-character-animations\n```","docs/set-character-state.md":"# set character state\n\nManually sets the state of a [sprite](/types/sprite) to match the given rule.\nThis state will stay until this function is called again or it is cleared.\nOnce state is cleared, it will go back to automatically updating.\nIf the state is invalid (e.g. \"Moving and NotMoving\") then it will be ignored.\n\nThis function is useful for games that make sprites look like they are moving without actually setting their velocity.\nFor example, in cutscenes or games where projectiles come towards the player.\nIf your game uses velocity or the \"move sprite with controller\" block, you should probably avoid using this function.\n\n```sig\ncharacterAnimations.setCharacterState(sprites.create(img`\n    .\n    `, characterAnimations.rule(Predicate.NotMoving))\n```\n\n## Parameters\n\n* **sprite**: a [sprite](/types/sprite) to set the state of\n* **rule**: a rule that will be the sprite's new state\n\n## Example #example\n\nIn this example, we create a plane that looks like it's flying because clouds are moving in the opposite direction.\nWe manually set the state of the plane to \"MovingRight\" and toggle it whenever the A button is pressed to pause/unpause the game.\n\n```blocks\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n    stopped = !(stopped)\n    if (stopped) {\n        for (let value of sprites.allOfKind(SpriteKind.Projectile)) {\n            value.setVelocity(0, 0)\n        }\n        characterAnimations.setCharacterState(mySprite, characterAnimations.rule(Predicate.NotMoving))\n        mySprite.say(\"PAUSE\")\n    } else {\n        for (let value of sprites.allOfKind(SpriteKind.Projectile)) {\n            value.setVelocity(-50, 0)\n        }\n        characterAnimations.setCharacterState(mySprite, characterAnimations.rule(Predicate.MovingRight))\n        mySprite.say(\"\")\n    }\n})\nlet projectile: Sprite = null\nlet stopped = false\nlet mySprite: Sprite = null\nscene.setBackgroundColor(9)\nmySprite = sprites.create(img`\n    ..ccc.........ffffff....\n    ..f4cc.......fcc22ff....\n    ..f44cc...fffccccff.....\n    ..f244cccc22224442cc....\n    ..f224cc2222222244b9c...\n    ..cf2222222222222b999c..\n    .c22c222222222b11199b2c.\n    f22ccccccc222299111b222c\n    fffffcc222c222222222222f\n    .....f2222442222222222f.\n    ....f222244fc2222222ff..\n    ...c222244ffffffffff....\n    ...c2222cfffc2f.........\n    ...ffffffff2ccf.........\n    .......ffff2cf..........\n    ........fffff...........\n    `, SpriteKind.Player)\ncharacterAnimations.loopFrames(\nmySprite,\n[img`\n    ..ccc.........ffffff....\n    ..f4cc.......fcc22ff....\n    ..f44cc...fffccccff.....\n    ..f244cccc22224442cc....\n    ..f224cc2222222244b9c...\n    ..cf2222222222222b999c..\n    .c22c222222222b11199b2c.\n    f22ccccccc222299111b222c\n    fffffcc222c222222222222f\n    .....f2222442222222222f.\n    ....f222244fc2222222ff..\n    ...c222244ffffffffff....\n    ...c2222cfffc2f.........\n    ...ffffffff2ccf.........\n    .......ffff2cf..........\n    ........fffff...........\n    `,img`\n    ..ccc.........ffffff....\n    ..f4cc.......fcc22ff....\n    ..f44cc...fffccccff.....\n    ..f244cccc22224442cc....\n    ..f224cc2222222244b9c...\n    ..cf222222222222b9999c..\n    .c22c222222222911199b2c.\n    f22ccccccc22229911b2222c\n    fffffcc222c222222222222f\n    .....f2224442222222222f.\n    ....f222444fc2222222ff..\n    ...c222444ffffffffff....\n    ...c2222cfffc2f.........\n    ...ffffffff2ccf.........\n    .......ffff2cf..........\n    ........fffff...........\n    `,img`\n    ..ccc..........ffffff...\n    ..f44c.......ffcc22ff...\n    ..f244c...fffccccfff....\n    ..f2244ccc22224442cc....\n    ..cf22cc222222222b99c...\n    .c222222222222b111999c..\n    f222ccccccc22299111bb2c.\n    fffffccc222c22222222222c\n    ...ccc22224422222222222f\n    ...c222244422222222222f.\n    ...c22244cffc2222222ff..\n    ....ccccffffcfffffff....\n    .......ffff2c2f.........\n    .......ffff2ccf.........\n    ........ffffff..........\n    ........................\n    `,img`\n    ..ccc.........fffffff...\n    ..f4cc.......ffcc22ff...\n    ..f44cc...fffccccfff....\n    ..f244cccc22224442cc....\n    ..f224cc2222222244b9c...\n    ..cf2222222222222b999c..\n    .c22c222222222b11199b2c.\n    f22ccccccc222299111b222c\n    fffffcc222c222222222222f\n    .....f2222442222222222f.\n    ....f222244fc2222222ff..\n    ...c222244ffffffffff....\n    ...c2222cfffc2f.........\n    ...ffffffff2ccf.........\n    .......ffff2cf..........\n    ........fffff...........\n    `,img`\n    ..............ffffff....\n    ..fc.........fcc22ff....\n    ..f4c.....fffccccff.....\n    ..f44ccccc22222222cc....\n    ..f244ccc222224442b9c...\n    ..cf24222222222244999c..\n    .ccf2222222222222999b2c.\n    fc22cc22222222b1111b222c\n    f22ccccccc2222991122222f\n    ffffffc222c22222222222f.\n    ....ff222244c2222222ff..\n    ...cf222244fffffffff....\n    ...c222244ffc2f.........\n    ...c2222cfffccf.........\n    ...ffffffff2cf..........\n    ........fff2c...........\n    `,img`\n    ..............ffffff....\n    ..fc.........fccc2ff....\n    ..f4c.....fffccc2ff.....\n    ..f44ccccc22222222cc....\n    ..f244ccc222224442b9c...\n    ..cf24222222222244999c..\n    .ccf2222222222222199b2c.\n    fc22cc22222222b1111b222c\n    f22ccccccc2222991222222f\n    ffffffc222c22222222222f.\n    ....ff222244c2222222ff..\n    ...cf222244fffffffff....\n    ...c222244ffc2f.........\n    ...c2222cfffccf.........\n    ...ffffffff2cf..........\n    ........fff2c...........\n    `],\n200,\ncharacterAnimations.rule(Predicate.MovingRight)\n)\ncharacterAnimations.setCharacterState(mySprite, characterAnimations.rule(Predicate.MovingRight))\nstopped = false\ngame.onUpdateInterval(1000, function () {\n    if (!(stopped)) {\n        projectile = sprites.createProjectileFromSide(img`\n            .........................111....\n            .....111111..1111111...1111111..\n            ....111111111111111111111111111.\n            ....111111111111111111111111111.\n            ....111111111111111111111111111.\n            ...111111111111111111111111111..\n            ...1111111111111111111111111111.\n            ..11111111111111111111111111111.\n            ..111111111111111111111111111111\n            .1111111111111111111111111111111\n            11111111111111111111111111111111\n            11111111111111111111111111111111\n            1111111111111111111111111111111.\n            .11111111111111111111111111111..\n            .111111111...111111111111111....\n            .................11111111.......\n            `, -50, 0)\n        projectile.y = randint(16, 104)\n    }\n})\n\n```\n\n```package\narcade-story=github:microsoft/arcade-character-animations\n```","docs/rule.md":"# create rule\n\nCreates a rule that can be used to check the state of the sprite or control when animations on a sprite run.\n\nRules are made of predicates, which are statements that describe how a sprite is currently acting.\nEvery predicate in a rule must be true for that rule to match a sprite.\nRules that are impossible, like \"Moving and NotMoving\", are always ignored.\n\n\n```sig\ncharacterAnimations.rule(Predicate.NotMoving)\n```\n\n## Parameters\n\n* **predicate**: a predicate that describes the state of the sprite\n\n## Rule Priority\n\nIn animations, rules that have more unique predicates always take priority over those with fewer predicates.\nFor example, let's say a sprite has animations for both of these rules:\n\n1. \"Moving\"\n2. \"Moving and FacingRight\"\n\nWhen the sprite moves to the right both of these rules are true.\nHowever, animation 2 will play because its rule contains more predicates.\n\n## Using \"Facing\" predicates\n\nThe predicates \"FacingUp\", \"FacingRight\", \"FacingDown\", and \"FacingLeft\" will only apply to a sprite if they are used in a rule that controls an animation on that sprite.\nThis behavior is mostly to support sidescrollers, which usually limit the number of directions that a sprite can face.\n\nFor example, in a platformer a sprite might move up and down (e.g. jumping and falling) but they usually only face left or right.\nIf the sprite is falling straight down with no change in x, the sprite will continue to face in whatever direction it was last facing instead of facing down.\n\nIf you want to match one of the \"Facing\" predicates, be sure to use it somewhere in the animations of that sprite.\n\n## Example #example\n\nIn this example, we animate a sprite when facing left and right but not up and down.\nIf you move the sprite up and down notice that whichever animation was looping before continues to loop.\n\n```blocks\nscene.setBackgroundColor(9)\nlet hero = sprites.create(img`\n    ........................\n    ........................\n    ........................\n    ........................\n    ..........ffff..........\n    ........ff1111ff........\n    .......fb111111bf.......\n    .......f11111111f.......\n    ......fd11111111df......\n    ......fd11111111df......\n    ......fddd1111dddf......\n    ......fbdbfddfbdbf......\n    ......fcdcf11fcdcf......\n    .......fb111111bf.......\n    ......fffcdb1bdffff.....\n    ....fc111cbfbfc111cf....\n    ....f1b1b1ffff1b1b1f....\n    ....fbfbffffffbfbfbf....\n    .........ffffff.........\n    ...........fff..........\n    ........................\n    ........................\n    ........................\n    ........................\n    `, SpriteKind.Player)\ncharacterAnimations.loopFrames(\nhero,\n[img`\n    ........................\n    ........................\n    ........................\n    ........................\n    ..........fffff.........\n    ........ff11111f........\n    .......fb111111bf.......\n    ......fbd1111111f.......\n    ......fddd111111df......\n    ......fdddd11111df......\n    ......fddddddd11df......\n    ......fddddddd111f......\n    ......fddddddcf11f......\n    .......fbdddb1111bf.....\n    ........fffcfdb1b1f.....\n    .......ffffffffbfbf.....\n    ....ff.fffffffffff......\n    .....ffffffff...........\n    .....ffffffb1b1f........\n    ......ffffffbfbf........\n    ........................\n    ........................\n    ........................\n    ........................\n    `,img`\n    ........................\n    ........................\n    ........................\n    ........................\n    ..........ffff..........\n    ........ff1111ff........\n    .......fb111111bf.......\n    .......fd1111111f.......\n    ......fdd1111111df......\n    ......fddd111111df......\n    ......fdddddd111df......\n    ......fbddddbfd1df......\n    ......fcbbbdcfddbf......\n    .......fcbb11111f.......\n    ........fffff1b1f.......\n    ........fb111cfbf.......\n    ........ffb1b1ff........\n    ......f.fffbfbf.........\n    ......ffffffff..........\n    .......fffff............\n    ........................\n    ........................\n    ........................\n    ........................\n    `],\n100,\ncharacterAnimations.rule(Predicate.Moving, Predicate.FacingRight)\n)\ncharacterAnimations.loopFrames(\nhero,\n[img`\n    ........................\n    ........................\n    ........................\n    ........................\n    .........fffff..........\n    ........f11111ff........\n    .......fb111111bf.......\n    .......f1111111dbf......\n    ......fd111111dddf......\n    ......fd11111ddddf......\n    ......fd11dddddddf......\n    ......f111dddddddf......\n    ......f11fcddddddf......\n    .....fb1111bdddbf.......\n    .....f1b1bdfcfff........\n    .....fbfbffffffff.......\n    ......fffffffffff.ff....\n    ...........ffffffff.....\n    ........f1b1bffffff.....\n    ........fbfbffffff......\n    ........................\n    ........................\n    ........................\n    ........................\n    `,img`\n    ........................\n    ........................\n    ........................\n    ........................\n    ..........ffff..........\n    ........ff1111ff........\n    .......fb111111bf.......\n    .......f1111111df.......\n    ......fd1111111ddf......\n    ......fd111111dddf......\n    ......fd111ddddddf......\n    ......fd1dfbddddbf......\n    ......fbddfcdbbbcf......\n    .......f11111bbcf.......\n    .......f1b1fffff........\n    .......fbfc111bf........\n    ........ff1b1bff........\n    .........fbfbfff.f......\n    ..........ffffffff......\n    ............fffff.......\n    ........................\n    ........................\n    ........................\n    ........................\n    `],\n100,\ncharacterAnimations.rule(Predicate.Moving, Predicate.FacingLeft)\n)\ncontroller.moveSprite(hero)\n\n```\n\n```package\narcade-story=github:microsoft/arcade-character-animations\n```","test.ts":"let mySprite = sprites.create(img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    `, SpriteKind.Player)\ncontroller.moveSprite(mySprite)\ncharacterAnimations.loopFrames(\nmySprite,\n[img`\n    . . . . . . f f f f . . . . . .\n    . . . . f f f 2 2 f f f . . . .\n    . . . f f f 2 2 2 2 f f f . . .\n    . . f f f e e e e e e f f f . .\n    . . f f e 2 2 2 2 2 2 e e f . .\n    . . f e 2 f f f f f f 2 e f . .\n    . . f f f f e e e e f f f f . .\n    . f f e f b f 4 4 f b f e f f .\n    . f e e 4 1 f d d f 1 4 e e f .\n    . . f e e d d d d d d e e f . .\n    . . . f e e 4 4 4 4 e e f . . .\n    . . e 4 f 2 2 2 2 2 2 f 4 e . .\n    . . 4 d f 2 2 2 2 2 2 f d 4 . .\n    . . 4 4 f 4 4 5 5 4 4 f 4 4 . .\n    . . . . . f f f f f f . . . . .\n    . . . . . f f . . f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f . . . . . .\n    . . . . f f f 2 2 f f f . . . .\n    . . . f f f 2 2 2 2 f f f . . .\n    . . f f f e e e e e e f f f . .\n    . . f f e 2 2 2 2 2 2 e e f . .\n    . f f e 2 f f f f f f 2 e f f .\n    . f f f f f e e e e f f f f f .\n    . . f e f b f 4 4 f b f e f . .\n    . . f e 4 1 f d d f 1 4 e f . .\n    . . . f e 4 d d d d 4 e f e . .\n    . . f e f 2 2 2 2 e d d 4 e . .\n    . . e 4 f 2 2 2 2 e d d e . . .\n    . . . . f 4 4 5 5 f e e . . . .\n    . . . . f f f f f f f . . . . .\n    . . . . f f f . . . . . . . . .\n    `,img`\n    . . . . . . f f f f . . . . . .\n    . . . . f f f 2 2 f f f . . . .\n    . . . f f f 2 2 2 2 f f f . . .\n    . . f f f e e e e e e f f f . .\n    . . f f e 2 2 2 2 2 2 e e f . .\n    . . f e 2 f f f f f f 2 e f . .\n    . . f f f f e e e e f f f f . .\n    . f f e f b f 4 4 f b f e f f .\n    . f e e 4 1 f d d f 1 4 e e f .\n    . . f e e d d d d d d e e f . .\n    . . . f e e 4 4 4 4 e e f . . .\n    . . e 4 f 2 2 2 2 2 2 f 4 e . .\n    . . 4 d f 2 2 2 2 2 2 f d 4 . .\n    . . 4 4 f 4 4 5 5 4 4 f 4 4 . .\n    . . . . . f f f f f f . . . . .\n    . . . . . f f . . f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f . . . . . .\n    . . . . f f f 2 2 f f f . . . .\n    . . . f f f 2 2 2 2 f f f . . .\n    . . f f f e e e e e e f f f . .\n    . . f e e 2 2 2 2 2 2 e f f . .\n    . f f e 2 f f f f f f 2 e f f .\n    . f f f f f e e e e f f f f f .\n    . . f e f b f 4 4 f b f e f . .\n    . . f e 4 1 f d d f 1 4 e f . .\n    . . e f e 4 d d d d 4 e f . . .\n    . . e 4 d d e 2 2 2 2 f e f . .\n    . . . e d d e 2 2 2 2 f 4 e . .\n    . . . . e e f 5 5 4 4 f . . . .\n    . . . . . f f f f f f f . . . .\n    . . . . . . . . . f f f . . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.MovingDown)\n)\ncharacterAnimations.loopFrames(\nmySprite,\n[img`\n    . . . . . . f f f f . . . . . .\n    . . . . f f e e e e f f . . . .\n    . . . f e e e f f e e e f . . .\n    . . f f f f f 2 2 f f f f f . .\n    . . f f e 2 e 2 2 e 2 e f f . .\n    . . f e 2 f 2 f f 2 f 2 e f . .\n    . . f f f 2 2 e e 2 2 f f f . .\n    . f f e f 2 f e e f 2 f e f f .\n    . f e e f f e e e e f e e e f .\n    . . f e e e e e e e e e e f . .\n    . . . f e e e e e e e e f . . .\n    . . e 4 f f f f f f f f 4 e . .\n    . . 4 d f 2 2 2 2 2 2 f d 4 . .\n    . . 4 4 f 4 4 4 4 4 4 f 4 4 . .\n    . . . . . f f f f f f . . . . .\n    . . . . . f f . . f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f . . . . . .\n    . . . . f f e e e e f f . . . .\n    . . . f e e e f f e e e f . . .\n    . . . f f f f 2 2 f f f f . . .\n    . . f f e 2 e 2 2 e 2 e f f . .\n    . . f e 2 f 2 f f f 2 f e f . .\n    . . f f f 2 f e e 2 2 f f f . .\n    . . f e 2 f f e e 2 f e e f . .\n    . f f e f f e e e f e e e f f .\n    . f f e e e e e e e e e e f f .\n    . . . f e e e e e e e e f . . .\n    . . . e f f f f f f f f 4 e . .\n    . . . 4 f 2 2 2 2 2 e d d 4 . .\n    . . . e f f f f f f e e 4 . . .\n    . . . . f f f . . . . . . . . .\n    `,img`\n    . . . . . . f f f f . . . . . .\n    . . . . f f e e e e f f . . . .\n    . . . f e e e f f e e e f . . .\n    . . f f f f f 2 2 f f f f f . .\n    . . f f e 2 e 2 2 e 2 e f f . .\n    . . f e 2 f 2 f f 2 f 2 e f . .\n    . . f f f 2 2 e e 2 2 f f f . .\n    . f f e f 2 f e e f 2 f e f f .\n    . f e e f f e e e e f e e e f .\n    . . f e e e e e e e e e e f . .\n    . . . f e e e e e e e e f . . .\n    . . e 4 f f f f f f f f 4 e . .\n    . . 4 d f 2 2 2 2 2 2 f d 4 . .\n    . . 4 4 f 4 4 4 4 4 4 f 4 4 . .\n    . . . . . f f f f f f . . . . .\n    . . . . . f f . . f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f . . . . . .\n    . . . . f f e e e e f f . . . .\n    . . . f e e e f f e e e f . . .\n    . . . f f f f 2 2 f f f f . . .\n    . . f f e 2 e 2 2 e 2 e f f . .\n    . . f e f 2 f f f 2 f 2 e f . .\n    . . f f f 2 2 e e f 2 f f f . .\n    . . f e e f 2 e e f f 2 e f . .\n    . f f e e e f e e e f f e f f .\n    . f f e e e e e e e e e e f f .\n    . . . f e e e e e e e e f . . .\n    . . e 4 f f f f f f f f e . . .\n    . . 4 d d e 2 2 2 2 2 f 4 . . .\n    . . . 4 e e f f f f f f e . . .\n    . . . . . . . . . f f f . . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.MovingUp)\n)\ncharacterAnimations.loopFrames(\nmySprite,\n[img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f f f . . . .\n    . . . . f f e e e e f 2 f . . .\n    . . . f f e e e e f 2 2 2 f . .\n    . . . f e e e f f e e e e f . .\n    . . . f f f f e e 2 2 2 2 e f .\n    . . . f e 2 2 2 f f f f e 2 f .\n    . . f f f f f f f e e e f f f .\n    . . f f e 4 4 e b f 4 4 e e f .\n    . . f e e 4 d 4 1 f d d e f . .\n    . . . f e e e 4 d d d d f . . .\n    . . . . 4 d d e 4 4 4 e f . . .\n    . . . . e d d e 2 2 2 2 f . . .\n    . . . . f e e f 4 4 5 5 f f . .\n    . . . . f f f f f f f f f f . .\n    . . . . . f f . . . f f f . . .\n    `,img`\n    . . . . . . f f f f f f . . . .\n    . . . . f f e e e e f 2 f . . .\n    . . . f f e e e e f 2 2 2 f . .\n    . . . f e e e f f e e e e f . .\n    . . . f f f f e e 2 2 2 2 e f .\n    . . . f e 2 2 2 f f f f e 2 f .\n    . . f f f f f f f e e e f f f .\n    . . f f e 4 4 e b f 4 4 e e f .\n    . . f e e 4 d 4 1 f d d e f . .\n    . . . f e e e 4 d d d d f . . .\n    . . . . f f e e 4 4 4 e f . . .\n    . . . . . 4 d d e 2 2 2 f . . .\n    . . . . . e d d e 2 2 2 f . . .\n    . . . . . f e e f 4 5 5 f . . .\n    . . . . . . f f f f f f . . . .\n    . . . . . . . f f f . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f f f . . . .\n    . . . . f f e e e e f 2 f . . .\n    . . . f f e e e e f 2 2 2 f . .\n    . . . f e e e f f e e e e f . .\n    . . . f f f f e e 2 2 2 2 e f .\n    . . . f e 2 2 2 f f f f e 2 f .\n    . . f f f f f f f e e e f f f .\n    . . f f e 4 4 e b f 4 4 e e f .\n    . . f e e 4 d 4 1 f d d e f . .\n    . . . f e e e e e d d d f . . .\n    . . . . . f 4 d d e 4 e f . . .\n    . . . . . f e d d e 2 2 f . . .\n    . . . . f f f e e f 5 5 f f . .\n    . . . . f f f f f f f f f f . .\n    . . . . . f f . . . f f f . . .\n    `,img`\n    . . . . . . f f f f f f . . . .\n    . . . . f f e e e e f 2 f . . .\n    . . . f f e e e e f 2 2 2 f . .\n    . . . f e e e f f e e e e f . .\n    . . . f f f f e e 2 2 2 2 e f .\n    . . . f e 2 2 2 f f f f e 2 f .\n    . . f f f f f f f e e e f f f .\n    . . f f e 4 4 e b f 4 4 e e f .\n    . . f e e 4 d 4 1 f d d e f . .\n    . . . f e e e 4 d d d d f . . .\n    . . . . f f e e 4 4 4 e f . . .\n    . . . . . 4 d d e 2 2 2 f . . .\n    . . . . . e d d e 2 2 2 f . . .\n    . . . . . f e e f 4 5 5 f . . .\n    . . . . . . f f f f f f . . . .\n    . . . . . . . f f f . . . . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.MovingRight)\n)\ncharacterAnimations.loopFrames(\nmySprite,\n[img`\n    . . . . f f f f f f . . . . . .\n    . . . f 2 f e e e e f f . . . .\n    . . f 2 2 2 f e e e e f f . . .\n    . . f e e e e f f e e e f . . .\n    . f e 2 2 2 2 e e f f f f . . .\n    . f 2 e f f f f 2 2 2 e f . . .\n    . f f f e e e f f f f f f f . .\n    . f e e 4 4 f b e 4 4 e f f . .\n    . . f e d d f 1 4 d 4 e e f . .\n    . . . f d d d d 4 e e e f . . .\n    . . . f e 4 4 4 e e f f . . . .\n    . . . f 2 2 2 e d d 4 . . . . .\n    . . . f 2 2 2 e d d e . . . . .\n    . . . f 5 5 4 f e e f . . . . .\n    . . . . f f f f f f . . . . . .\n    . . . . . . f f f . . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . f f f f f f . . . . . .\n    . . . f 2 f e e e e f f . . . .\n    . . f 2 2 2 f e e e e f f . . .\n    . . f e e e e f f e e e f . . .\n    . f e 2 2 2 2 e e f f f f . . .\n    . f 2 e f f f f 2 2 2 e f . . .\n    . f f f e e e f f f f f f f . .\n    . f e e 4 4 f b e 4 4 e f f . .\n    . . f e d d f 1 4 d 4 e e f . .\n    . . . f d d d e e e e e f . . .\n    . . . f e 4 e d d 4 f . . . . .\n    . . . f 2 2 e d d e f . . . . .\n    . . f f 5 5 f e e f f f . . . .\n    . . f f f f f f f f f f . . . .\n    . . . f f f . . . f f . . . . .\n    `,img`\n    . . . . f f f f f f . . . . . .\n    . . . f 2 f e e e e f f . . . .\n    . . f 2 2 2 f e e e e f f . . .\n    . . f e e e e f f e e e f . . .\n    . f e 2 2 2 2 e e f f f f . . .\n    . f 2 e f f f f 2 2 2 e f . . .\n    . f f f e e e f f f f f f f . .\n    . f e e 4 4 f b e 4 4 e f f . .\n    . . f e d d f 1 4 d 4 e e f . .\n    . . . f d d d d 4 e e e f . . .\n    . . . f e 4 4 4 e e f f . . . .\n    . . . f 2 2 2 e d d 4 . . . . .\n    . . . f 2 2 2 e d d e . . . . .\n    . . . f 5 5 4 f e e f . . . . .\n    . . . . f f f f f f . . . . . .\n    . . . . . . f f f . . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . f f f f f f . . . . . .\n    . . . f 2 f e e e e f f . . . .\n    . . f 2 2 2 f e e e e f f . . .\n    . . f e e e e f f e e e f . . .\n    . f e 2 2 2 2 e e f f f f . . .\n    . f 2 e f f f f 2 2 2 e f . . .\n    . f f f e e e f f f f f f f . .\n    . f e e 4 4 f b e 4 4 e f f . .\n    . . f e d d f 1 4 d 4 e e f . .\n    . . . f d d d d 4 e e e f . . .\n    . . . f e 4 4 4 e d d 4 . . . .\n    . . . f 2 2 2 2 e d d e . . . .\n    . . f f 5 5 4 4 f e e f . . . .\n    . . f f f f f f f f f f . . . .\n    . . . f f f . . . f f . . . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.MovingLeft)\n)\ncharacterAnimations.loopFrames(\nmySprite,\n[img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f 3 3 f f e e e e f f 3 3 f .\n    . f b b f b f e e f b f b b f .\n    . f b b e 1 f 4 4 f 1 e b b f .\n    f f b b f 4 4 4 4 4 4 f b b f f\n    f b b f f f e e e e f f f b b f\n    . f e e f b d d d d b f e e f .\n    . . e 4 c d d d d d d c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `,img`\n    . . . . . . . f f . . . . . . .\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . f e 3 3 3 3 3 3 3 3 3 3 e f .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f b 3 f f e e e e f f 3 b f .\n    f f b b f b f e e f b f b b f f\n    f b b b e 1 f 4 4 f 1 e b b b f\n    . f b b e e 4 4 4 4 4 f b b f .\n    . . f 4 4 4 e d d d b f e f . .\n    . . f e 4 4 e d d d d c 4 e . .\n    . . . f e e d d b d b b f e . .\n    . . . f f 1 d 1 d 1 1 f f . . .\n    . . . . . f f f b b f . . . . .\n    `,img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f 3 3 f f e e e e f f 3 3 f .\n    . f b b f b f e e f b f b b f .\n    . f b b e 1 f 4 4 f 1 e b b f .\n    f f b b f 4 4 4 4 4 4 f b b f f\n    f b b f f f e e e e f f f b b f\n    . f e e f b d d d d b f e e f .\n    . . e 4 c d d d d d d c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `,img`\n    . . . . . . . f f . . . . . . .\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . f e 3 3 3 3 3 3 3 3 3 3 e f .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f b 3 f f e e e e f f 3 b f .\n    f f b b f b f e e f b f b b f f\n    f b b b e 1 f 4 4 f 1 e b b b f\n    . f b b f 4 4 4 4 4 e e b b f .\n    . . f e f b d d d e 4 4 4 f . .\n    . . e 4 c d d d d e 4 4 e f . .\n    . . e f b b d b d d e e f . . .\n    . . . f f 1 1 d 1 d 1 f f . . .\n    . . . . . f b b f f f . . . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.NotMoving)\n)\ncharacterAnimations.loopFrames(\nmySprite,\n[img`\n    . . . . . . f f f f 4 4 f . . .\n    . . . . f f b f 5 4 5 5 4 f . .\n    . . . f b 3 3 e 4 5 5 5 5 f . .\n    . . f b 3 3 3 3 e 4 4 4 e f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . . f 3 3 3 3 e b 3 e e 3 3 f .\n    . . f 3 3 3 3 f f e e e 3 3 f .\n    . . f b b b b f b f e e e 3 f .\n    . . f b b b b e 1 f 4 4 e f . .\n    . f f b b b b f 4 4 4 4 f . . .\n    . f b b b b f f f e e e f . . .\n    . . f b b f 4 4 e d d d f . . .\n    . . . f f e 4 4 e d d d f . . .\n    . . . . f b e e b d b d b f . .\n    . . . . f f d 1 d 1 d 1 f f . .\n    . . . . . . f f b b f f . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . f f f f 4 4 f . . .\n    . . . . f f b f 5 4 5 5 4 f . .\n    . . . f b 3 3 e 4 5 5 5 5 f . .\n    . . f b 3 3 3 3 e 4 4 4 e f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 3 f .\n    . . f 3 3 3 3 e b 3 e e 3 3 f .\n    . . f 3 3 3 3 f f e e e 3 3 f .\n    . f f b b b b f b f e e e f . .\n    . f b b b b b e 1 f 4 4 e . . .\n    . f b b b b b f 4 4 4 4 f . . .\n    . . f b b b 4 4 e d d d f . . .\n    . . . f f f 4 4 e d d d f . . .\n    . . . f b b e e b b d d d f . .\n    . . . . f b d d 1 d 1 d b f . .\n    . . . . . f f f b b f f f . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.FacingRight, Predicate.NotMoving)\n)\ncharacterAnimations.loopFrames(\nmySprite,\n[img`\n    . . . f 4 4 f f f f . . . . . .\n    . . f 4 5 5 4 5 f b f f . . . .\n    . . f 5 5 5 5 4 e 3 3 b f . . .\n    . . f e 4 4 4 e 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 e e 3 b e 3 3 3 3 f . .\n    . f 3 3 e e e f f 3 3 3 3 f . .\n    . f 3 e e e f b f b b b b f . .\n    . . f e 4 4 f 1 e b b b b f . .\n    . . . f 4 4 4 4 f b b b b f f .\n    . . . f e e e f f f b b b b f .\n    . . . f d d d e 4 4 f b b f . .\n    . . . f d d d e 4 4 e f f . . .\n    . . f b d b d b e e b f . . . .\n    . . f f 1 d 1 d 1 d f f . . . .\n    . . . . f f b b f f . . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . f 4 4 f f f f . . . . . .\n    . . f 4 5 5 4 5 f b f f . . . .\n    . . f 5 5 5 5 4 e 3 3 b f . . .\n    . . f e 4 4 4 e 3 3 3 3 b f . .\n    . f 3 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 e e 3 b e 3 3 3 3 f . .\n    . f 3 3 e e e f f 3 3 3 3 f . .\n    . . f e e e f b f b b b b f f .\n    . . . e 4 4 f 1 e b b b b b f .\n    . . . f 4 4 4 4 f b b b b b f .\n    . . . f d d d e 4 4 b b b f . .\n    . . . f d d d e 4 4 f f f . . .\n    . . f d d d b b e e b b f . . .\n    . . f b d 1 d 1 d d b f . . . .\n    . . . f f f b b f f f . . . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.FacingLeft, Predicate.NotMoving)\n)\ncharacterAnimations.loopFrames(\nmySprite,\n[img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f 3 3 f f e e e e f f 3 3 f .\n    . f b b f b f e e f b f b b f .\n    . f b b e 1 f 4 4 f 1 e b b f .\n    f f b b f 4 4 4 4 4 4 f b b f f\n    f b b f f f e e e e f f f b b f\n    . f e e f b d d d d b f e e f .\n    . . e 4 c d d d d d d c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `,img`\n    . . . . . . . f f . . . . . . .\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . f e 3 3 3 3 3 3 3 3 3 3 e f .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f b 3 f f e e e e f f 3 b f .\n    f f b b f b f e e f b f b b f f\n    f b b b e 1 f 4 4 f 1 e b b b f\n    . f b b e e 4 4 4 4 4 f b b f .\n    . . f 4 4 4 e d d d b f e f . .\n    . . f e 4 4 e d d d d c 4 e . .\n    . . . f e e d d b d b b f e . .\n    . . . f f 1 d 1 d 1 1 f f . . .\n    . . . . . f f f b b f . . . . .\n    `,img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f 3 3 f f e e e e f f 3 3 f .\n    . f b b f b f e e f b f b b f .\n    . f b b e 1 f 4 4 f 1 e b b f .\n    f f b b f 4 4 4 4 4 4 f b b f f\n    f b b f f f e e e e f f f b b f\n    . f e e f b d d d d b f e e f .\n    . . e 4 c d d d d d d c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `,img`\n    . . . . . . . f f . . . . . . .\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 4 5 5 5 5 4 e f . . .\n    . . f b 3 e 4 4 4 4 e 3 b f . .\n    . f e 3 3 3 3 3 3 3 3 3 3 e f .\n    . f 3 3 e b 3 e e 3 b e 3 3 f .\n    . f b 3 f f e e e e f f 3 b f .\n    f f b b f b f e e f b f b b f f\n    f b b b e 1 f 4 4 f 1 e b b b f\n    . f b b f 4 4 4 4 4 e e b b f .\n    . . f e f b d d d e 4 4 4 f . .\n    . . e 4 c d d d d e 4 4 e f . .\n    . . e f b b d b d d e e f . . .\n    . . . f f 1 1 d 1 d 1 f f . . .\n    . . . . . f b b f f f . . . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.FacingDown, Predicate.NotMoving)\n)\ncharacterAnimations.loopFrames(\nmySprite,\n[img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 3 3 3 3 3 3 e f . . .\n    . . f b 3 3 3 3 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 3 3 3 3 3 3 3 3 3 3 f .\n    . f b 3 3 3 3 3 3 3 3 3 3 b f .\n    . f b b 3 3 3 3 3 3 3 3 b b f .\n    . f b b b b b b b b b b b b f .\n    f c b b b b b b b b b b b b c f\n    f b b b b b b b b b b b b b b f\n    . f c c b b b b b b b b c c f .\n    . . e 4 c f f f f f f c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 3 3 3 3 3 3 e f . . .\n    . . f b 3 3 3 3 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f b 3 3 3 3 3 3 3 3 3 3 b f .\n    . f b b 3 3 3 3 3 3 3 3 b b f .\n    . f b b b b b b b b b b b b f .\n    f c b b b b b b b b b b b b f .\n    f b b b b b b b b b b b b c f .\n    f f b b b b b b b b b b c f . .\n    . f c c c f f f f f f f e c . .\n    . . . f b b d b d d e 4 4 e . .\n    . . . f f 1 1 d 1 d e e f . . .\n    . . . . . f b b f f f . . . . .\n    `,img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 3 3 3 3 3 3 e f . . .\n    . . f b 3 3 3 3 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 3 3 3 3 3 3 3 3 3 3 f .\n    . f b 3 3 3 3 3 3 3 3 3 3 b f .\n    . f b b 3 3 3 3 3 3 3 3 b b f .\n    . f b b b b b b b b b b b b f .\n    f c b b b b b b b b b b b b c f\n    f b b b b b b b b b b b b b b f\n    . f c c b b b b b b b b c c f .\n    . . e 4 c f f f f f f c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 3 3 3 3 3 3 e f . . .\n    . . f b 3 3 3 3 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f b 3 3 3 3 3 3 3 3 3 3 b f .\n    . f b b 3 3 3 3 3 3 3 3 b b f .\n    . f b b b b b b b b b b b b f .\n    . f b b b b b b b b b b b b c f\n    . f c b b b b b b b b b b b b f\n    . . f c b b b b b b b b b b f f\n    . . c e f f f f f f f c c c f .\n    . . e 4 4 e d d b d b b f . . .\n    . . . f e e d 1 d 1 1 f f . . .\n    . . . . . f f f b b f . . . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.FacingUp, Predicate.NotMoving)\n)\ncharacterAnimations.loopFrames(\nmySprite,\n[img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 3 3 3 3 3 3 e f . . .\n    . . f b 3 3 3 3 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 3 3 3 3 3 3 3 3 3 3 f .\n    . f b 3 3 3 3 3 3 3 3 3 3 b f .\n    . f b b 3 3 3 3 3 3 3 3 b b f .\n    . f b b b b b b b b b b b b f .\n    f c b b b b b b b b b b b b c f\n    f b b b b b b b b b b b b b b f\n    . f c c b b b b b b b b c c f .\n    . . e 4 c f f f f f f c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 3 3 3 3 3 3 e f . . .\n    . . f b 3 3 3 3 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f b 3 3 3 3 3 3 3 3 3 3 b f .\n    . f b b 3 3 3 3 3 3 3 3 b b f .\n    . f b b b b b b b b b b b b f .\n    f c b b b b b b b b b b b b f .\n    f b b b b b b b b b b b b c f .\n    f f b b b b b b b b b b c f . .\n    . f c c c f f f f f f f e c . .\n    . . . f b b d b d d e 4 4 e . .\n    . . . f f 1 1 d 1 d e e f . . .\n    . . . . . f b b f f f . . . . .\n    `,img`\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 3 3 3 3 3 3 e f . . .\n    . . f b 3 3 3 3 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f 3 3 3 3 3 3 3 3 3 3 3 3 f .\n    . f b 3 3 3 3 3 3 3 3 3 3 b f .\n    . f b b 3 3 3 3 3 3 3 3 b b f .\n    . f b b b b b b b b b b b b f .\n    f c b b b b b b b b b b b b c f\n    f b b b b b b b b b b b b b b f\n    . f c c b b b b b b b b c c f .\n    . . e 4 c f f f f f f c 4 e . .\n    . . e f b d b d b d b b f e . .\n    . . . f f 1 d 1 d 1 d f f . . .\n    . . . . . f f b b f f . . . . .\n    `,img`\n    . . . . . . . . . . . . . . . .\n    . . . . . f f 4 4 f f . . . . .\n    . . . . f 5 4 5 5 4 5 f . . . .\n    . . . f e 3 3 3 3 3 3 e f . . .\n    . . f b 3 3 3 3 3 3 3 3 b f . .\n    . . f 3 3 3 3 3 3 3 3 3 3 f . .\n    . f b 3 3 3 3 3 3 3 3 3 3 b f .\n    . f b b 3 3 3 3 3 3 3 3 b b f .\n    . f b b b b b b b b b b b b f .\n    . f b b b b b b b b b b b b c f\n    . f c b b b b b b b b b b b b f\n    . . f c b b b b b b b b b b f f\n    . . c e f f f f f f f c c c f .\n    . . e 4 4 e d d b d b b f . . .\n    . . . f e e d 1 d 1 1 f f . . .\n    . . . . . f f f b b f . . . . .\n    `],\n500,\ncharacterAnimations.rule(Predicate.FacingUp, Predicate.NotMoving)\n)\n\n"}}